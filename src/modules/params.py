from collections import OrderedDict

COMMANDS_DESCRIPTIONS = OrderedDict( \
    {
    # "add": "adds targets to a project", \
    "assets": "builds assets from tile and/or shape files", \
    "build": "builds a project", \
    "check": "it checks dependencies", \
    "clean": "cleans binary files generated by a project", \
    "clone": "clones a project", \
    "commands" :"list all commands",  \
    "compilers": "check present compilers", \
    "config": "displays the configuration", \
    "create": "creates a new project",  \
    "debug": "builds the native version of a project in debug mode", \
    "delete": "completely deletes a project", \
    "extend": "generates non-8x8 shapes from 8x8 shapes", \
    "files": "shows all generated binary files", \
    "help": "provides help on a command or topic", \
    "import": "imports tiles from (Assembly/BASIC) files", \
    "list": "lists all projects", \
    "make": "build project using shape files", \
    "manual": "prints the manual", \
    "rebuild": "generates assets and builds a project", \
    # "remove": "removes targets from a project", \
    "rename": "renames a project", \
    "reset": "deletes graphics assets", \
    "rip": "rips Assembly or BASIC listings to produce tiles", \
    "rotate": "rips Assembly or BASIC listings to produce rotated tiles", \
    "run": "runs a project", \
    "self": "test xl script", \
    "shapes": "generates tiles from shapes", \
    "show": "shows tiles of a project as shapes", \
    "size": "builds the native version of a project with a given size", \
    "slow": "builds a project for a target with a given slowdown", \
    "split": "splits a shape file in left and right shape", \
    "string": "produces case-sensitive strings as Cross-Lib characters macros", \
    "test": "runs some tests", \
    "tile": "converts a shape file into a tile", \
    "tools": "builds the tools", \
    "unit-tests": "run unit-tests",
    })

COMMANDS_LIST = COMMANDS_DESCRIPTIONS.keys()


SHORT_COMMANDS_LIST = OrderedDict( \
    { \
        "c": "clean", \
        "d": "debug", \
        "f": "files", \
        "h": "help", \
        "l": "list", \
        "m": "make", \
        "r": "rebuild", \
        "s": "slow", \
        "t": "test", \
        "u": "unit-tests", \
        "x": "run",
    })




def handle_two_letter_params(params):
    command = params[1]
    if (len(command)==2) and command not in COMMANDS_LIST and command not in SHORT_COMMANDS_LIST:
        first_short_command = params[1][0]
        second_short_command = params[1][1]
        first_command = SHORT_COMMANDS_LIST[first_short_command]
        second_command = SHORT_COMMANDS_LIST[second_short_command]
        new_params = ['', first_command, second_command]
        if len(params)>2:
            new_params.extend(params[2:])
        print("Interpreting two-letter command as: " + str(new_params))
        return new_params
    return params
#!/usr/bin/env python
 
DEBUG_TARGET  = "ncurses_debug"

NATIVE_TARGET = "ncurses_debug"

C64_EMULATOR = "x64"
VIC20_EMULATOR = "xvic"
PLUS4_EMULATOR = "xplus4"
PET_EMULATOR = "xpet"

MAME_EMULATOR = "mame"

import shutil

import os,sys,re

import time

import re

from os import walk

sys.path.append("assets")

from import_from_source import *


COMMANDS_DESCRIPTIONS = \
    {
    "build": "builds a project", \
    "clean": "cleans binary files generated by a project", \
    "create": "creates a new project",  \
    "delete": "completely deletes a project", \
    "extend": "generates non-8x8 shapes from 8x8 shapes", \
    "help": "provides help on a command or topic", \
    "list": "lists all projects", \
    "make": "build project using shape files", \
    "reset": "deletes graphics assets", \
    "debug": "builds the native version of a project in debug mode", \
    "test": "runs some tests", \
    "tile": "converts a shape file into a tile", \
    "rebuild": "generates assets and builds a project", \
    "import": "imports tiles from (Assembly/BASIC) files", \
    "size": "builds the native version of a project", \
    "show": "shows tiles of a project as shapes", \
    "string": "produces case-sensitive strings as Cross-Lib characters macros", \
    "run": "runs a project", \
    "clone": "clones a project", \
    "rename": "renames a project", \
    "rotate": "rips Assembly or BASIC listings to produce rotated tiles", \
    "tools": "builds the tools", \
    "files": "shows all generated binary files", \
    "commands": "list all commands",  \
    "add": "adds targets to a project", \
    "remove": "removes targets from a project", \
    "shapes": "generates tiles from shapes", \
    "rip": "rips Assembly or BASIC listings to produce tiles", \
    "manual": "prints the manual" \
    }

COMMANDS_LIST = COMMANDS_DESCRIPTIONS.keys()


SHORT_COMMANDS_LIST = \
    { \
        "c": "clean", \
        "d": "debug", \
        "f": "file", \
        "m": "make", \
        "h": "help", \
        "l": "list", \
        "f": "files", \
        "r": "rebuild", \
        "x": "run"
    }

def run_command_verbosely(command_string):
    if verbose: 
        print("Going to run: ")
        print(command_string)
    else:
        command_string+= " > /dev/null 2>&1"

    os.system(command_string)


def are_you_sure():
    if sys.version_info[0] < 3:
        return raw_input("Are you sure [Y/N]? ").lower()
    else:
        return input("Are you sure [Y/N]? ").lower()


def files_in_path(mypath):
    files = []
    for (dirpath, dirnames, filenames) in walk(mypath):
        files.extend(filenames)
        break
    return files


def multiple_project_rebuild(params):

    mypath = params[0]
    target = params[1]
    
    if(len(params)>=3):
        reset_opts = [params[2]]
    else:
        reset_opts = []
    
    projects = []
    for (dirpath, dirnames, filenames) in walk(mypath):
        projects.extend(dirnames)
        break
            
    for project_name in projects:
        print("\n")
        print("PROJECT: " + project_name)
        print("\n")
        reset([mypath, project_name]+reset_opts)
        build([mypath, project_name, target])


def multiple_reset(mypath):
    projects = []
    for (dirpath, dirnames, filenames) in walk(mypath):
        projects.extend(dirnames)
        break
            
    for project_name in projects:
        print("PROJECT: " + project_name)
        reset([mypath, project_name])
        print("\n")


def multiple_debug_build(mypath,target,xsize,ysize,debug):
    projects = []
    for (dirpath, dirnames, filenames) in walk(mypath):
        projects.extend(dirnames)
        break
        
    if use_tools:
        use_tools_str = " USE_TOOLS=1 "
    else:
        use_tools_str = "" 
        
    for project_name in projects:
        make_command = \
            GNU_MAKE + " " + target + use_tools_str + " XSIZE=" + xsize +  " YSIZE=" + ysize + " _DEBUG_FLAG=" + str(debug) + \
                " _NATIVE_CC=" + native_compiler + \
                " TOOL_CC=" + tool_compiler + \
                " -f " + mypath+"/"+project_name+"/Makefile."+project_name;
                
        run_command_verbosely(make_command)


def multiple_build(mypath,target,threads,zsdcc_extra_optimization):
    projects = []
    
    if use_tools:
        use_tools_str = " USE_TOOLS=1 "
    else:
        use_tools_str = ""   
    
    for (dirpath, dirnames, filenames) in walk(mypath):
        projects.extend(dirnames)
        break
    

    for project_name in projects:
        make_command = \
            GNU_MAKE + " " + target + use_tools_str + \
                " ZSDCC_MAKEFILE_THREADS_OPTS=\'-j " + threads + "'" \
                " ZSDCC_MAKEFILE_COMPILATION_OPTS=" + zsdcc_extra_optimization + \
                " _NATIVE_CC=" + native_compiler + \
                " TOOL_CC=" + tool_compiler + \
                " -f " + mypath+"/"+project_name+"/Makefile."+project_name;

        run_command_verbosely(make_command)


def only_upper_and_digits(s):
    return "".join(c for c in s if c.isupper() or c in ["0","1","2","3","4","5","6","7","8","9"])


def only_upper_digits_and_space(s):
    return "".join(c for c in s if c.isupper() or c in [" ", "0","1","2","3","4","5","6","7","8","9"])


def no_space(s):
    return "".join(c for c in s if c!=" ")
    

# Convert a string into a sequence of macros that can be used in the code (only necessary for small letters)
def string(params):
    string = params[1]
    m = re.search('[a-zA-Z0-9 ]*',string)
    string = m.group(0)
    
    string = string.replace(" ", "@")
    converted_string = ""
    
    for ch in string:
        converted_string+= "_XL_"+ch+" "
    
    converted_string = converted_string.replace("_XL_@", "_XL_SPACE")
    
    for i in range(9):
        converted_string = converted_string.replace("_XL_"+str(i),'"'+str(i)+'"')
    
    print(converted_string)


# Run a project natively (terminal with ncurses) with a given XSize and YSize
def size(params,debug):

    if len(params)<2:
        game_dir = "helloworld"
    else:
        game_dir = params[1]

    project_type = project_category(game_dir)

    parent_dir = project_type + "s"

    xsize = params[2]
    ysize = params[3]

    target = NATIVE_TARGET

    print("Project name       : " + game_dir)
    print("Project type       : " + project_type)
    print("XSize: " + xsize)
    print("YSize: " + ysize)

    parent_and_game_dir = parent_dir + "/" + game_dir

    if(game_dir not in ["games", "examples", "projects", "all"]):
        if not os.path.exists(parent_and_game_dir):
            print("Project not found!")
            return

        make_command = \
            GNU_MAKE + " " + target + " XSIZE=" + xsize +  " YSIZE=" + ysize + " _DEBUG_FLAG=" + str(debug) +  \
                " _NATIVE_CC=" + native_compiler + \
                " TOOL_CC=" + tool_compiler + \
                " -f " + parent_dir+"/"+game_dir+"/Makefile."+game_dir;
        run_command_verbosely(make_command)
    else:
        if game_dir in["games","examples","projects"]:
            multiple_debug_build(game_dir,target,xsize,ysize,debug)
        elif game_dir in["new"]:
            multiple_debug_build("projects",target,xsize,ysize,debug)
        elif game_dir in["builtin","built-in"]:
            multiple_debug_build("games",target,xsize,ysize,debug)
            multiple_debug_build("examples",target,xsize,ysize,debug)
        elif game_dir=="all":
            multiple_debug_build("games",target,xsize,ysize,debug)
            multiple_debug_build("examples",target,xsize,ysize,debug)
            multiple_debug_build("projects",target,xsize,ysize,debug)
        else:
            return


# Rebuild a project, i.e., also rebuilds assets
def rebuild(params):
    game_dir = params[1]

    if game_dir=="new":
        game_dir = "projects"

    # project_groups = 

    if game_dir in ["games","examples","projects"]:
        # print([game_dir]+params[2:])
        multiple_project_rebuild([game_dir]+params[2:]) #, target, reset_opts)
        return
    elif game_dir in ["builtin","built-in"]:
        multiple_project_rebuild(["games"]+params[2:])
        multiple_project_rebuild(["examples"]+params[2:])
        return
    elif game_dir=="all":
        multiple_project_rebuild(["games"]+params[2:])
        multiple_project_rebuild(["examples"]+params[2:])
        multiple_project_rebuild(["projects"]+params[2:])
        return
    
    reset(params)
    # if(params[len(params)-1]=="-y"):
        # build(params[:-1])
    # else:
        
    build(params)




def convert_makefile(dir,old_type,old_name,new_name):

    dest_path = "projects/"+dir
    source_game_dir = old_name
    target_game_dir = new_name
    source_parent_dir = old_type
    target_parent_dir = "projects"
    
    if verbose:
        print("- dir: " + dir)
        print("- old_type: " + old_type)
        print("- old_name: " + old_name)
        print("- new_game: " + new_name)
    
    fin = open("./"+dest_path+"/Makefile."+source_game_dir, "rt")
    data = fin.read()
    data = data.replace('CROSS-' + source_game_dir.upper(),'CROSS-'+target_game_dir.upper())
    data = data.replace('GAME_NAME := ' + source_game_dir, 'GAME_NAME := '+target_game_dir)
    data = data.replace('PARENT_DIR = ' + source_parent_dir + "s", 'PARENT_DIR = ' + target_parent_dir)

    data = data.replace('include ./' + old_type + "s/" + source_game_dir, 'include ./projects/' + target_game_dir)
    fin.close()
    fin = open("./"+dest_path+"/Makefile."+target_game_dir, "wt")
    fin.write(data)
    fin.close()
    
    os.remove("./"+dest_path+"/Makefile."+source_game_dir)


# Rename a project
def rename(params):
    if len(params)<2:
        source_game_dir = "helloworld"
    else:
        source_game_dir = params[1]
        
    if len(params)<3:
        print("ERROR: You need to provide more paramaters")
        return
        
    target_game_dir = params[2]
            
    source_project_type = project_category(source_game_dir)
    source_parent_dir = source_project_type + "s"
    source_parent_and_game_dir = source_parent_dir + "/" + source_game_dir

    if source_project_type != "project":
        return

    target_project_type = "project"
    target_parent_dir = target_project_type + "s"
    target_parent_dir_and_game_dir = target_parent_dir + "/" + target_game_dir
    
    print("DEBUG) source_project_type: " + source_project_type)
    
    convert_makefile(source_game_dir, source_project_type, source_game_dir, target_game_dir)
    
    os.rename(target_parent_dir + "/" +source_game_dir, target_parent_dir_and_game_dir)


# Clone a project to create a new one
def clone(params):
    if len(params)<2:
        source_game_dir = "helloworld"
    else:
        source_game_dir = params[1]
        
    if len(params)<3:
        return
        
    target_game_dir = params[2]
        
        
    source_project_type = project_category(source_game_dir)
    if verbose:
        print("source project category: " + source_project_type)
    source_parent_dir = source_project_type + "s"
    source_parent_and_game_dir = source_parent_dir + "/" + source_game_dir

    target_project_type = "project"
    target_parent_dir = target_project_type + "s"
    target_parent_dir_and_game_dir = target_parent_dir + "/" + target_game_dir

    if verbose:
        print("Source project name    : " + source_game_dir)
        print("Source Project type    : " + source_project_type)
        print("Path to source project : " + source_parent_and_game_dir)
        print("")
        print("Target project name    : " + target_game_dir)
        print("target Project type    : " + target_project_type)
        print("Path to target project : " + target_parent_dir_and_game_dir)

    # if not os.path.exists(target_parent_dir_and_game_dir):
        # print("Creating project dir...")
        # os.makedirs(target_parent_dir_and_game_dir)

    source_path = source_parent_and_game_dir
    if verbose:
        print("source_path: " + source_path)
    dest_path = target_parent_dir_and_game_dir
    if verbose:
        print("dest_path: " + dest_path)

    if not os.path.exists(dest_path+"/tiles"):
        if verbose:
            print("Copying tiles...")
        shutil.copytree(source_path, dest_path)

    if not os.path.exists(dest_path+"/generated_assets"):
        if verbose:
            print("Create empty generated_assets directory...")
        os.makedirs(dest_path+"/generated_assets")

    convert_makefile(target_game_dir, source_project_type, source_game_dir, target_game_dir)


# Generate tools from source code
def tools():
    make_command = \
        GNU_MAKE + " -j " + compilation_threads + " tools TOOL_CC=" + tool_compiler + " -f makefiles.common/auxiliary/Makefile_tools"
    run_command_verbosely(make_command)
        

# Build a project (for a target or multiple targets)
def build(params):

    if len(params)<2:
        game_dir = "helloworld"
    else:
        game_dir = params[1]

    if len(params)>=1 and game_dir=="tools":
        tools()
    else:

        project_type = project_category(game_dir)
        parent_dir = project_type + "s"

        if len(params)<3:
            target = "ncurses"
        else:
            target = params[2]

        if len(params)<4:
            threads = str(compilation_threads)
        else:
            threads = params[3]

        if len(params)>=5 and params[4]=="on":
            zsdcc_extra_optimization = "--max-allocs-per-node200000"
        else:
            zsdcc_extra_optimization = ""

        if len(params)>=6:
            compiler_opts = " " + params[5]
        else:
            compiler_opts = ""

        if verbose:
            print("Project name       : " + game_dir)
            print("Project type       : " + project_type)
            print("Number of threads  : " + threads)
            print("Extra optimization : " + zsdcc_extra_optimization)
            print("Compiler's options : " + compiler_opts)
            
            print("sccz80_compiler_opts: " + sccz80_compiler_opts)
            print("zsdcc_compiler_opts:  " + zsdcc_compiler_opts)
            print("cmoc_compiler_opts:  " + cmoc_compiler_opts)
            
            print("")

        parent_and_game_dir = parent_dir + "/" + game_dir

        if(game_dir not in ["games", "examples", "projects", "all"]):
            if not os.path.exists(parent_and_game_dir):
                print("Project not found!")
                return
            if use_tools:
                use_tools_str = " USE_TOOLS=1 "
            else:
                use_tools_str = ""

            print("building make_command...")
            make_command = \
                GNU_MAKE + " " + target + \
                    use_tools_str + \
                    " ZSDCC_MAKEFILE_THREADS_OPTS=\'-j " + threads + "'" \
                    " ZSDCC_MAKEFILE_COMPILATION_OPTS='" + zsdcc_compiler_opts + " " + zsdcc_extra_optimization + "'" + \
                    " SCCZ80_MAKEFILE_COMPILATION_OPTS='" + sccz80_compiler_opts + compiler_opts + "'" + \
                    " CMOC_MAKEFILE_COMPILATION_OPTS='" + cmoc_compiler_opts + "'" + \
                    " _NATIVE_CC=" + native_compiler + \
                    " TOOL_CC=" + tool_compiler + \
                    " -f " + parent_dir+"/"+game_dir+"/Makefile."+game_dir;
            print("make_command: " + make_command)

            
            run_command_verbosely(make_command)
            
        else:
            if game_dir in ["games","examples","projects"]:
                multiple_build(game_dir,target,threads,zsdcc_extra_optimization)
            elif game_dir=="new":
                multiple_build("projects",target,threads,zsdcc_extra_optimization)
            elif game_dir in ["builtin","built-in"]:
                multiple_build("games",target,threads,zsdcc_extra_optimization)
                multiple_build("examples",target,threads,zsdcc_extra_optimization)
            elif game_dir=="all":
                multiple_build("games",target,threads,zsdcc_extra_optimization)
                multiple_build("examples",target,threads,zsdcc_extra_optimization)
                multiple_build("projects",target,threads,zsdcc_extra_optimization)
            else:
                return     


# Create a new project 
def create(params):
    if len(params)<2:
        game_dir = "helloworld"
    else:
        game_dir = params[1]
        game_dir_capital = game_dir.upper()        
        game_dir_capital_without_special_chars = only_upper_digits_and_space(game_dir.upper().replace("-"," ").replace("_"," "))
        
        game_dir = no_space(game_dir)
        
        if(game_dir in example_projects or game_dir in game_projects or game_dir in COMMANDS_LIST):
            print("invalid name!")
            return

    if len(params)<3:
        project_type = "helloworld"
    else:
        if params[2]=="game" or params[2]=="arcade":
            project_type = "arcade_game"
        elif params[2]=="text":
            project_type = "text_game"
        else: 
            if params[2] in ["apis","show_apis","example","show","demo"]:
                project_type = "demo"
            else:
                project_type = "helloworld"

    parent_dir = "projects" 

    if verbose:
        print("New project name: " + game_dir)
        print("Project type: " + project_type)

    parent_and_game_dir = parent_dir + "/" + game_dir

    if not os.path.exists(parent_and_game_dir):
        if verbose:
            print("Creating project dir...")
        os.makedirs(parent_and_game_dir)

    source_path = "./template_projects/"+project_type+"_code.template"
    if verbose:
        print("source_path: " + source_path)
    dest_path = parent_and_game_dir
    if verbose:
        print("dest_path: " + dest_path)

    if not os.path.exists(dest_path+"/tiles"):
        if verbose:
            print("Copying tiles...")
        shutil.copytree(source_path+"/tiles", dest_path+"/tiles")

    if not os.path.exists(dest_path+"/generated_assets"):
        if verbose:
            print("Create empty generated_assets directory...")
        os.makedirs(dest_path+"/generated_assets")

    if not os.path.exists(dest_path+"/config"):
        if verbose:
            print("Create empty config directory...")
        os.makedirs(dest_path+"/config")

    file_names = ["main.c"]

    for file_name in file_names:
        if verbose:
            print("Copying file_name: " + file_name)
        shutil.copy(source_path+"/"+file_name, dest_path)

    # Replace _GAME_NAME_CAPITAL with the capitalized game name without special characters
    fin = open("./"+dest_path+"/main.c", "rt")
    data = fin.read()
    data = data.replace('_GAME_NAME_CAPITAL',game_dir_capital_without_special_chars)
    fin.close()
    fin = open("./"+dest_path+"/main.c", "wt")
    #overrite the input file with the resulting data
    fin.write(data)
    
    templated_makefile_path = "./template_projects"

    shutil.copy(templated_makefile_path+"/"+"Makefile_game.template", "./"+dest_path+"/Makefile."+game_dir)

    shutil.copy(templated_makefile_path+"/"+"/config/project_config.mk.template", "./"+dest_path+"/config/project_config.mk")


    #read input file
    fin = open("./"+dest_path+"/Makefile."+game_dir, "rt")
    #read file contents to string
    data = fin.read()
    #replace all occurrences of the required string
    data = data.replace('_GAME_NAME_CAPITAL',game_dir_capital)
    data = data.replace('_GAME_NAME_', game_dir)
    data = data.replace('_PARENT_DIR_', parent_dir)
    #close the input file
    fin.close()
    #open the file in write mode
    fin = open("./"+dest_path+"/Makefile."+game_dir, "wt")
    #overrite the input file with the resulting data
    fin.write(data)
    #close the file
    fin.close()


# Delete temporary project files If a project is specified, it also deletes generated assets.
def reset(params):
    game_dir = params[1]
    par_len = len(params)

    if game_dir in ["games","examples","projects"]:
        multiple_project_reset(game_dir)
        return
    elif game_dir=="new":
        multiple_project_reset("projects")
        return
    elif game_dir in ["builtin","built-in"]:
        multiple_project_reset("games")
        multiple_project_reset("examples")
        return
    elif game_dir=="all":
        multiple_project_reset("games")
        multiple_project_reset("examples")
        multiple_project_reset("projects") 
        return

    elif (len(params)==2) and (params[par_len-1]=='-y'): #(params[1]=='-y'):
        make_command = GNU_MAKE + " clean_generic_no_built_in -f makefiles.common/auxiliary/Makefile_common"

        if verbose:
            print("Delete all non-project-specific temporary files")

        run_command_verbosely(make_command)
        return
        
    elif len(params)<2:
        make_command = GNU_MAKE + " clean_generic_no_built_in -f makefiles.common/auxiliary/Makefile_common"

        print("Delete all non-project-specific temporary files")
        if(are_you_sure()=="y"):
            run_command_verbosely(make_command)
            return
        else:
            return
    else:
        game_dir = params[1]

    project_type = project_category(game_dir)

    parent_dir = project_type + "s"

    # if (len(params)>2) and (params[par_len-1]=='-y'): #(params[2]=="-y"):
        # interactive = False
    # else:
        # interactive = True

    print("Project name: " + game_dir)

    parent_and_game_dir = parent_dir + "/" + game_dir

    if not os.path.exists(parent_and_game_dir):
        print("Project not found!")
        return

    print("Delete all temporary files including generated assets for '"+game_dir+"'")

    # if (not interactive) or (are_you_sure()=="y"):
    make_command = GNU_MAKE + " clean_no_built_in -f " + parent_dir+"/"+game_dir+"/Makefile."+game_dir;

    run_command_verbosely(make_command)


# Clean project data
def clean(params):

    if(len(params)>=2) and params[1]=="tools":
        make_command = GNU_MAKE + " clean_tools -f makefiles.common/auxiliary/Makefile_tools"

        run_command_verbosely(make_command)
        return
        
    if len(params)<2:
        make_command = GNU_MAKE + " clean_generic -f makefiles.common/auxiliary/Makefile_common"

        if verbose:
            print("Delete all built binaries and non-project=specific temporary files")
        if(are_you_sure()=="y"):
            run_command_verbosely(make_command)
            return
        else:
            return
    elif (len(params)==2) and (params[1]=='-y'):
        make_command = GNU_MAKE + " clean_generic -f makefiles.common/auxiliary/Makefile_common"

        if verbose:
            print("Delete all built binaries and non-project-specific temporary files")

        run_command_verbosely(make_command)
        return
    else:
        game_dir = params[1]

    project_type = project_category(game_dir)

    parent_dir = project_type + "s"

    # if (len(params)>2) and (params[2]=="-y"):
        # interactive = False
    # else:
        # interactive = True

    print("Project name: " + game_dir)

    parent_and_game_dir = parent_dir + "/" + game_dir

    if not os.path.exists(parent_and_game_dir):
        print("Project not found!")
        return

    print("Delete all built binaries and temporary files (also specific to '"+game_dir+"', e.g., generated assets)")

    # if (not interactive) or (are_you_sure()=="y"):
    make_command = GNU_MAKE + " clean -f " + parent_dir+"/"+game_dir+"/Makefile."+game_dir;

    run_command_verbosely(make_command)


# Delete project
def delete(params):
    if(len(params)>=2) and params[1]=="tools":
        make_command = GNU_MAKE + " clean_tools"

        run_command_verbosely(make_command)
        return

    if len(params)<2:
        game_dir="helloworld"
    else:
        candidate_name = params[1]
        if(candidate_name in example_projects or candidate_name in game_projects or candidate_name in COMMANDS_LIST):
            print("invalid name!")
            return
        else:
            game_dir = candidate_name

    if (len(params)>2) and (params[2]=="-y"):
        interactive = False
    else:
        interactive = True

    parent_dir = "projects"

    if verbose:
        print("Project name: " + game_dir)

    parent_and_game_dir = parent_dir + "/" + game_dir
    if verbose:
        print("Remove the project '"+game_dir+"' with all its files (source, graphics assets, makefile)")        
    if (not interactive) or (are_you_sure()=="y"):
        if os.path.exists(parent_and_game_dir):
            if verbose:
                print("Deleting directory " + parent_and_game_dir)
            shutil.rmtree(parent_and_game_dir)

        makefile_name = "Makefile."+game_dir
        if os.path.exists(makefile_name):
            if verbose:
                print("Deleting..." + makefile_name)
            os.remove(makefile_name)
        if verbose:
            print("'" + game_dir + "' deleted")
    else:
        return


def files_in_path(mypath):
    files = []
    for (dirpath, dirnames, filenames) in walk(mypath):
        # print(dirpath, dirnames,filenames)
        files.extend(filenames)
        break
    return files


def self_test():
    delete(["delete","_test_project","-y"])

    # print(files_in_path("../build"))
    # exit()
    clean(["clean","-y"]);
    files_after_clean = len(files_in_path("../build"))

    if files_after_clean>1:
        print("[xl clean]  KO")
        exit()
    # else:
        # print("[xl clean]  OK")

    projects_before_create = list(["list"],False)
    
    project_dirs_before_create = len(dirs_in_path("./projects"))
    
    create(["create", "_test_project"])
    project_dirs_after_create = len(dirs_in_path("./projects"))
    # print(project_dirs_after_create)
    
    if project_dirs_after_create!=project_dirs_before_create+1:
        print("[xl create] KO")
        exit()
    else:
        print("[xl create] OK")
    
    projects_after_create = list(["list"],False)
    if projects_after_create!=projects_before_create+1:
        print("[xl list]   KO") 
        exit()
    else:
        print("[xl list]   OK")
        

    build(["build", "_test_project", "stdio"])
    built_files = files_in_path("../build")
    if len(built_files)!=files_after_clean+1:
        print("[xl build]  KO")
        exit()
    else:
        print("[xl build]  OK")

    delete(["delete","_test_project","-y"])
    project_dirs_after_delete = len(dirs_in_path("./projects"))
    
    if project_dirs_after_delete != project_dirs_before_create:
        print("[xl delete] KO")
        exit()
    else:
        print("[xl delete] OK")
    # print(dirs_in_path("./projects"))

    clean(["clean","-y"]);
    files_after_clean = len(files_in_path("../build"))

    if files_after_clean>1:
        print("[xl clean]  KO")
        exit()
    else:
        print("[xl clean]  OK")

    return




# Self-test xl and native build
def test(params):
    if(len(params)<2) or params[1]=="self":
        self_test()
    else:
        if params[1].startswith("z88dk_targets"):
            parallel = " -j " + compilation_threads
        else:
            parallel = ""                
        if params[1].endswith("_targets"):
            make_command = GNU_MAKE + parallel + " test_" + params[1] + " " + " _NATIVE_CC="+ native_compiler +  \
                                               " -f makefiles.other/chase/tests/Makefile.tests"
            run_command_verbosely(make_command)
        elif params[1]=="stdio":
            make_command = GNU_MAKE + " _NATIVE_CC="+ native_compiler + " stdio " + \
                                               " -f makefiles.other/chase/tests/Makefile.tests"
            run_command_verbosely(make_command)
        elif params[1]=="z88dk_targets_quick":
            make_command = GNU_MAKE + " -j " + compilation_threads + \
                             " z88dk_quick_test -f makefiles.other/chase/tests/Makefile.z88dk_quick_tests"
            run_command_verbosely(make_command)   
        else:
            print("Parameter not recognized")
    print("OK")
    

# List all projects    
def list(params, print_projects=True):

    if(len(params)<2):
        project_dirs = ["examples", "games", "projects"]
    elif(params[1]=="all"):
        project_dirs = ["examples", "games", "projects"]
    elif params[1] in ["games", "examples", "projects"]:
        project_dirs = [params[1]]
    elif params[1] in ["new"]:
        project_dirs = ["projects"]
    elif params[1] in ["built-in", "builtin"]:
        project_dirs = ["games", "examples"]
    else:
        return

    count = 0

    for mypath in project_dirs:
        if print_projects:
            print("["+mypath+"]")
        for (dirpath, dirnames, filenames) in walk(mypath):
            # projects.extend(dirnames)
            for project in dirnames:
                if print_projects:
                    print("  "+str(project))
                count+=1
            break
        if print_projects:
            print("")
    
    if verbose:
        print("Found: " + str(count))
        print("")

    return count



def help_help():
    print("Possible values for <command>:")
    print(' '.join(str(cmd) for cmd in COMMANDS_LIST))
    print("")
    print("Use xl help <command> for <command>-specific help")
    print("\nExample:")
    print("\nxl help create              \n  It displays the help page for the 'create' command")


def run_native(params):
    command_prefix = "../build/X" + params[1] + "_ncurses"

    if len(params)>=4:
        xsize = params[2]
        ysize = params[3]
        command_string = command_prefix + "_" + xsize + "X" + ysize + "." + NATIVE_EXTENSION
    else:
        command_string = command_prefix + "." + NATIVE_EXTENSION
    run_command_verbosely(command_string)


DEFAULT_TARGET_MAP = {"vic20":"vic20_exp_16k", "c16":"c16_16k", "plus4":"c16_32k", "pet":"pet_16k", "msx": "msx_32k"}

VICE_TARGETS = ["c64", 
                "vic20", "vic20_unexpanded", "vic20_exp_3k", "vic20_exp_8k", "vic20_exp_16k", 
                "c16", "plus4", "c16_16k", "c16_32k",
                "pet", "pet_8k", "pet_16k"
               ]

MAME_TARGETS = ["msx", "msx_16k", "msx_32k"]

# Run a project by using an emulator if necessary. Only few emulators are supported.
def run(params):
    
    if len(params)==2:
        run_native(params)
    
    if len(params)>=3:
        target = params[2]
        if target in DEFAULT_TARGET_MAP:
            target = DEFAULT_TARGET_MAP[target]
            if verbose:
                print("defaulting to target: " + target)
           
        if target=="ncurses":
            run_native(params[0:2]+params[3:])
            
        # TODO: replace this with a check on prefixes
        elif target in VICE_TARGETS:
            extension = "prg"
            rom_directory = vice_rom_path
            if target=="c64":
                rom_directory += "c64"

                emulator = C64_EMULATOR
            elif target.startswith("vic20"):
                rom_directory += "vic20"

                if target=="vic20_exp_3k":
                    emulator = VIC20_EMULATOR + " -memory 3k"
                elif target=="vic20_unexpanded":
                    emulator = VIC20_EMULATOR + " -memory none"
                else:
                    emulator = VIC20_EMULATOR + " -memory 24k"
            elif target.startswith("c16") or target=="plus4":
                rom_directory += "plus4"

                emulator = PLUS4_EMULATOR
            elif target.startswith("pet"):
                rom_directory += "pet"
                emulator = PET_EMULATOR
            else:
                print("'xl run' does not support this target")
                return
            command_string = vice_path + emulator + " -directory " + rom_directory + " -autostartprgmode 1  ../build/X" + params[1] + "_" + target + "." + extension
            run_command_verbosely(command_string)

        elif target in MAME_TARGETS:
            emulator = MAME_EMULATOR
            
            if target.startswith("msx"):
                extension = "rom"
                mame_sub_target = "canonv20" 
                # mame_rom_path = "'c:\\Retro\\Emulators\\Mame0251\\roms\\'"
                command_string = mame_path + emulator + " " + mame_sub_target + " -rompath " + mame_rom_path + " -window -uimodekey DEL  -skip_gameinfo  -cart1 ../build/X" + params[1] + "_" + target + "." + extension
                run_command_verbosely(command_string)
                # print(command_string)
        else:
            print("'xl run' does not support this target")
            return


# It should be able to import from 
# - Assembly files that use byte directives with either decimal and hex notation
# - Assembly files that use word directives with ONLY hex notation
def import_from_source(params, rotate = False):
    filename = params[1]

    rip_option = params[len(params)-1]=="-rip"

    xsize = 8
    ysize = 8

    tiles = rip_tiles(filename, xsize, ysize, rip_option, rotate)

    try:
        if(len(params)>=3) and "-" not in params[2]:
            store_tiles(params[2],tiles, xsize, ysize)
    except Exception as exception:
        print("Sorry! Failed to store tiles: \n" + str(exception.args))


# It should be able to import from 
# - Assembly files that use byte directives with either decimal and hex notation
# - Assembly files that use word directives with ONLY hex notation
# - BASIC files that use decimal, hex notation or "headless" hex notation (by guessing)
# Remark: This function is like "import_from_source" with the "-rip" option
def rip(params, rotate = False):
    filename = params[1]

    xsize = 8
    ysize = 8

    tiles = rip_tiles(filename, xsize, ysize, True, rotate)

    try:
        if(len(params)>=3) and "-" not in params[2]:
            store_tiles(params[2],tiles, xsize, ysize)
    except Exception as exception:
        print("Sorry! Failed to store tiles: \n" + str(exception.args))    

# Show all generated files
def files():
    make_command = "ls -ls ../build"
    os.system(make_command)   


# Import a shape as single tile from a text file that describes its shape with characters
def tile(params):

    tile,xsize,ysize = import_tile(params[1],verbose)
    

    print(tile)
    
    if verbose:
        print_shape(compute_shape(tile,xsize))
    
    if(len(params)>=3):
        store_tile(params[2], tile, xsize, ysize, params[3])


TARGETS_WITH_XSIZE_6 = {"oric", "atmos", "comx_ntsc", "comx", "pecom", "micro"}
TARGETS_WITH_XSIZE_7 = {"apple2", "apple2enh"}

TARGETS_WITH_YSIZE_6 = {"atari_lynx"}
TARGETS_WITH_YSIZE_9 = {"comx", "micro", "pecom"}
TARGETS_WITH_YSIZE_8 = {"comx_ntsc", "micro_ntsc"} # Necessary to avoid comx and micro


def detect_xsize(target):
    for target_6_xsize in TARGETS_WITH_XSIZE_6:
        if target.startswith(target_6_xsize):
            return 6
    for target_7_xsize in TARGETS_WITH_XSIZE_7:
        if target.startswith(target_7_xsize):
            return 7
    return 8


# TODO: VG-5000 has 8x10 characters but it is currently treated as 8x8
# TODO: Cidelsa has 8x6 (rotated 6x8 in reality)
# comx_ntsc : 6x8
# comx (pal): 6x9
def detect_ysize(target):
    for target_8_ysize in TARGETS_WITH_YSIZE_8: # Necessary to have this before size 9 for NTSC case (comx, micro)
        if target.startswith(target_8_ysize):
            return 8
    for target_6_ysize in TARGETS_WITH_YSIZE_6:
        if target.startswith(target_6_ysize):
            return 6
    for target_9_ysize in TARGETS_WITH_YSIZE_9:
        if target.startswith(target_9_ysize):
            return 9
    return 8


# General strategies:
# xsize or ysize < 8 -> cut left/right or top/bottom columns/rows
# ysize > 8          -> repeat top/bottom rows 
def convert(tile_vect,xsize,ysize):

    if xsize==7:
        tile_vect = [vect[:-1] for vect in tile_vect]
    if xsize==6:
        tile_vect = [(vect[:-1])[1:] for vect in tile_vect]

    if(ysize==6):
        tile_vect = (tile_vect[:-1])[1:]
    # else:
        # print("error")
        # print(extend_to_smaller)
        # return
    # TODO: Implement switch row/column instead of cut
    # elif extend_to_smaller=="switch":
        # if xsize==7:
            # tile_vect = [vect[:-1] for vect in tile_vect]
        # if xsize==6:
            # tile_vect = [(vect[:-1])[1:] for vect in tile_vect]

        # if(ysize==6):
            # tile_vect = (tile_vect[:-1])[1:]    

    # TODO: Implement zero
    if extend_algorithm=="duplicate":
        if(ysize==9):
            tile_vect = tile_vect + [ tile_vect[-1]]
        if(ysize==10):
            tile_vect = tile_vect[0:1] + tile_vect + [ tile_vect[-1]]
    elif extend_algorithm=="zero":
        zero_row = [ "." * xsize ]
        if(ysize==9):
            tile_vect = tile_vect + zero_row
        if(ysize==10):
            tile_vect = zero_row + tile_vect + zero_row
    return tile_vect


def write_shapes(project, shapes, xsize,ysize):
    path = path_to_shapes(project,xsize,ysize)
    if not replace_shapes:
        path = path.replace("shapes","_shapes")
    if verbose:
        print("Writing shapes in: " + path)
    if os.path.exists(path):
        if verbose:
            print("Directory exists")
    else:
        if verbose:
            print("Directory does not exist")
        os.makedirs(path)
    for tile_number, shape in shapes.items():
        #print(tile_number,shape)
        path_to_shape = path+"shape"+tile_number+".txt" 
        if verbose:
            print("Path to shape file: " + path_to_shape)
        path_to_tile = path.replace("shapes","tiles")+"tile"+tile_number+".txt"
        if verbose:
            print("Path to tile file: " + path_to_tile)
        if replace_shapes and (os.path.exists(path_to_shape) or os.path.exists(path_to_tile)):
            if os.path.exists(path_to_shape):
                print("shape "+ tile_number +" already exists")
            elif os.path.exists(path_to_tile):
                print("tile "+ tile_number +" already exists")
        else:  
            with open(path_to_shape,"w") as file:
                for row in shape:
                    print(row)
                    file.write(row+"\n")
        if verbose:
            print("")
    # with open(path) as file:
    # project_makefile = file.read()


# Extand 8x8 shapes by reshaping them into shapes with other dimensions 
def extend(params):
    project = params[1]

    path_to_8x8_files = path_to_shapes(project,8,8)
    if verbose:
        print("Path to shape files: " + path_to_8x8_files)
        print("")
    shape_files = files_in_path(path_to_8x8_files)
    
    dict7x8 = dict()
    dict6x8 = dict()
    dict8x6 = dict()
    dict6x9 = dict()
    for shape_file in shape_files:
        path_to_shape_file = path_to_8x8_files + "/" + shape_file
        
        print("shape file: " + shape_file)
        tile_number_str = shape_file[5:].replace(".txt","")
        
        print("---tile number: " + tile_number_str)
        
        print("")

        tile,xsize,ysize = read_shape(path_to_shape_file)
        if(xsize!=8 or ysize!=8):
            print("Shape in file " + path_to_shape_file + " has wrong dimensions!")
            print(tile)
            return
        print(tile)
        print("")
        print("7x8");
        shape7x8 = convert(tile,7,8)
        display_shape(shape7x8)
        dict7x8[tile_number_str]=shape7x8
        print("")
        print("6x8");
        shape6x8 = convert(tile,6,8)
        display_shape(shape6x8)
        dict6x8[tile_number_str]=shape6x8
        print("")
        print("8x6");
        shape8x6 = convert(tile,8,6)
        display_shape(shape8x6)
        dict8x6[tile_number_str]=shape8x6
        print("")
        print("6x9");
        shape6x9 = convert(tile,6,9)
        display_shape(shape6x9)
        dict6x9[tile_number_str]=shape6x9
        print("")
    # print(str(dict7x8))
    write_shapes(project,dict7x8,7,8)
    write_shapes(project,dict6x8,6,8)
    write_shapes(project,dict8x6,8,6)
    write_shapes(project,dict6x9,6,9)
    return


# Import as tiles all shapes from files named "shape<number>.txt" inside the directories in the "shapes" directory of a given project
def shapes(params):
    project_name = params[1]

    project_cat = project_category(project_name)
    
    if(len(params)>3):   # xsize, ysize parameters
        xsize_str,ysize_str = params[2:]
    elif len(params)==3: # target parameter 
        detected_xsize = detect_xsize(params[2])
        detected_ysize = detect_ysize(params[2])
        xsize_str = str(detected_xsize)
        ysize_str = str(detected_ysize)
        print("Detected xsize: " + xsize_str)
        print("Detected ysize: " + ysize_str)
    else:                # no parameter
        xsize_str = "8"
        ysize_str = "8"
    print("xsize: " + xsize_str)
    print("ysize: " + ysize_str)
    path_to_files = project_cat + "s/" + params[1] + "/shapes/" + xsize_str + "x" + ysize_str + "/"
    print("Path to shape files: " + path_to_files)
    shape_files = files_in_path(path_to_files)
    if verbose:
        print("shape files: ", shape_files)
    for shape_file in shape_files:
        if verbose:
            print("processing file: ", shape_file)

        path_to_shape_file = path_to_files + str(shape_file)
        if verbose:
            print("processing path file: ", path_to_shape_file)
        tile_number_str = shape_file[5:].replace(".txt","")
        
        print("tile number: " + tile_number_str)
        
        tile,xsize,ysize = import_tile(path_to_shape_file)
        
        if str(xsize)!=xsize_str or str(ysize)!=ysize_str:
            print("Shape in file " + path_to_shape_file + " has wrong dimensions!")
            print(tile)
            return
        print(tile)
        print_shape(compute_shape(tile,xsize))
        
        store_tile(project_name, tile, xsize, ysize, tile_number_str)
        
        print("")


# Show all commands
def commands(params):
    # Show full length commands
    for command, description in COMMANDS_DESCRIPTIONS.items():
        print(command + " -> " + description)

    # Show short-hands
    print("")
    for short_command in SHORT_COMMANDS_LIST.items():
        print(short_command[0] + " -> " + short_command[1])


# Show tile shapes of a given project
def show(params):
    parent_dir = project_category(params[1])+"s"
    
    if len(params)<4:
        xsize = "8"
        ysize = "8"
    else:
        xsize = params[2]
        ysize = params[3]

    if len(params)>=5:
        index = params[4]
    else:
        index = "";
    
    if index!="":
        print_shape_from_file(parent_dir, params[1], xsize, ysize, index)
    
    else:
        for i in range(NUMBER_OF_TILES):
            print_shape_from_file(parent_dir, params[1], xsize, ysize, i)
    

def remove(params):
    project = params[1]
    
    target = params[2]
    
    print("project: " + project)
    print("target: " + target)
    
    proj_cat = project_category(project)
    print("project category: " + proj_cat)
    
    if(proj_cat != "project"):
        print("You cannot modify a built-in project")
        
    new_target_path = "makefiles.common/targets/"
    
    print("path: " + new_target_path)
    
    possible_targets = files_in_path(new_target_path)
    print(possible_targets)
    
    new_Makefile = "Makefile_" + target
    
    if new_Makefile in possible_targets:
        print("Target found in list of candidate extra targets")
    else:
        print("Target not found in list of candidate extra targets")

    project_path = "projects/" +  project

    full_project_path = project_path + "/Makefile." + project
    
    with open(full_project_path) as file:
        project_makefile = file.read()
        
    if(target+":" in project_makefile):
        print("Target present in " + full_project_path)
    else:
        print("Target not present in " + full_project_path)
        return
    
    full_new_target_path = new_target_path + new_Makefile

    cleaned_project_makefile = re.sub(target+":(.*)(\r*\n){2}","",project_makefile, flags=re.MULTILINE|re.DOTALL)
    
    command_string = "mv " + full_project_path + " " + full_project_path + "_BACKUP"
    run_command_verbosely(command_string)
    
    with open(full_project_path,'w') as file:
        file.write(cleaned_project_makefile)


def add(params):
    project = params[1]
    
    target = params[2]
    
    if verbose:
        print("project: " + project)
        print("target: " + target)
    
    proj_cat = project_category(project)
    
    if verbose:
        print("project category: " + proj_cat)
    
    if(proj_cat != "project"):
        print("You cannot modify a built-in project")
        
    new_target_path = "makefiles.common/targets/"
    
    if verbose:
        print("path: " + new_target_path)
    
    possible_targets = files_in_path(new_target_path)
    if verbose:
        print(possible_targets)
    
    new_Makefile = "Makefile_" + target
    
    if new_Makefile in possible_targets:
        if verbose:
            print("Target found in list of candidate extra targets")
    else:
        print("Target not found in list of candidate extra targets")
        return

    project_path = "projects/" +  project

    full_project_path = project_path + "/Makefile." + project
    
    with open(full_project_path) as file:
        project_makefile = file.read()
        
    if(target+":" in project_makefile):
        print("Target already present. First delete it from " + full_project_path)
        return
    
    full_new_target_path = new_target_path + new_Makefile
    
    if verbose:
        print("Adding this Makefile target(s)")
    command_string = "cat " + full_new_target_path
    run_command_verbosely(command_string)
    if verbose:
        print("\n")
    
    command_string = "cat " + full_new_target_path + " >> " + full_project_path
    run_command_verbosely(command_string)


def full_params(params):
    full_command = SHORT_COMMANDS_LIST.get(params[1])
    if(full_command is not None):
        if verbose:
            print("Full command: " + str(full_command))
            print();
        # print(params)
        return ["", full_command] + params[2:]
        # print(params)
        # return
    else:
        return params


def help(params):
    if len(params)<2:
        print("\nxl <command> <[optional] parameters>")   
        print("\n(or xl <project> <[optional] parameters> as a shorthand for \n xl build <project> <[optional] parameters>)")
        print("\n<parameters>")
        help_help()
    elif params[1] in COMMANDS_DESCRIPTIONS.keys():

        print("It " + COMMANDS_DESCRIPTIONS[params[1]] + "\n")
        params = full_params(params)

        if params[1]=="add":
            print("\nxl add <project> <target>")
            print("")
            print("It adds support for the new target <target> into <project> by modifying its Makefile.")
            print("")
            print("Example:")
            print("If you have previously created a new project 'foo'")
            print("(e.g., by cloning it with 'xl clone bomber foo'),")
            print("then you can add support for the 'einstein' target to it with")
            print("xl add foo einstein")
        elif params[1]=="extend":
            print("\nxl extend <project>")
            print("")
            print("It generates candidate shapes of different sizes from the 8x8 shapes of <project>.")
            print("Example:")
            print("In order to generate candidate shapes for foo using 8x8 shapes, you can do:")     
            print("xl extend foo")
        elif params[1]=="remove":
            print("\nxl remove <project> <target>")
            print("")
            print("It removes support for the new target <target> into <project> by modifying its Makefile.")
            print("Remark: It does so by searching a regex in the concerned Makefile.")
            print("        It removes the target in the Makefile.")
            print("        For extra safety, a backup Makefile file with the previous content is also generated")
            print("")
            print("Example:")
            print("If you have previously created a new project 'foo'")
            print("(e.g., by cloning it with 'xl clone bomber foo'),")
            print("then you can remove support for the 'einstein' target to it with")
            print("xl remove foo einstein")
        elif params[1]=="make":
            print("\nxl make <project> <target>")
            print("")
            print("It re-builds <project> for <target> and its assets by using the pictorial text files in the shapes directory.")
            print("It is equivalent to:")
            print("xl shapes <project> <target>")
            print("xl rebuild <project> <target>")
            print("")
            print("Example:")
            print("xl make foo vic20")
            print("builds the project foo and its assets from the pictorial text file for the Vic 20")
        elif params[1]=="tools":
            print("\nxl tools")
            print("\n(or xl build tools)")
            print("")
            print("It builds some post-processing tools from their source code.")
            print("")
            print("This command has to be run only once to build the tools. The tools are used by few targets to generate ready to use images.")
        elif params[1]=="rename":
            print("\nxl rename <old project name> <new project name>")   
            print("It renames an existing user-defined project <old project name> to <new project name>.")
            print("")
            print("Remark: No matter the type of source project, the target project will be in the 'src/projects' directory")
            print("")
            print("Example:")
            print("If you have previously created a new project 'foo'")
            print("(e.g., by cloning it with 'xl clone bomber foo'),")
            print("then you can rename it to 'bar' with")
            print("xl rename foo bar")
        elif params[1]=="clone":
            print("\nxl clone <source project> <target project>")   
            print("It clones an existing project of any type to create a new user-defined project.")
            print("")
            print("Remark: No matter the type of source project, the target project will be in the 'src/projects' directory")
            print("")
            print("Example:")
            print("If you want to clone the built-in game Cross Horde you can just do:")
            print("xl clone horde foo")
            print("")
            print("If you have previously created a user-defined project 'foo',")
            print("you can further clone it with:")
            print("xl clone foo bar")
        elif params[1]=="show":
            print("xl show <project> <[optional] XTileSize> <[optional] YTileSize> <[optional] TileIndex>.")
            print("It displays the shape of graphics tiles of a given project.")
            print("")
            print("<project>")
            print("Use this mandatory parameter to specify the project whose tiles you want to display")
            print("")
            print("<XTileSize> <YTileSize>")
            print("These optional parameters specify the size of the tiles we want to see")
            print("")
            print("<TileIndex>")
            print("This optional parameter specifies which tile we want to display.")
            print("When no index is specified, then all tiles of the given shape are displayed.")
            print("")
            print("Example:")
            print("xl show chase 8 8 5")
            print("Decoding file tile: ./games/chase/tiles/8x8/tile5.txt")
            print("")
            print("..####..")
            print(".#....#.")
            print("#.#..#.#")
            print("#..##..#")
            print("#..##..#")
            print("#.#..#.#")
            print(".#....#.")
            print("..####..")
            
        elif params[1]=="size":
            print("xl size <project> <XSize> <YSize>")
            print("It builds <project> for the native host with screen size provided by <XSize> and <YSize>.")
            print("The built binaries will be in the 'build' directory.")

            print("\n<project>")
            print("<project> can also be 'games'/'examples'/'projects'/'all' to build multiple projects.")   
            
            print("\nxl size bomber 20 20       \n  It builds Cross Bomber for the native host with screen size 20x20.")
            print("\nxl reize examples 16 12     \n  It builds all examples for the native host with screen size 16x12.")

        elif params[1]=="run":
            print("xl run <project> <[optional] xsize> <[optional] ysize>")
            print("xl run <project> <[optional] target>")
            print("If no target is specified, it runs the previously compiled native version of <project>.")
            print("If integer parameters <xsize> and <ysize> are provided, then it runs the version of those sizes.")
            print("")
            print("<project>")
            print("This parameter is the name of the project that we want to run.")
            print("")
            print("<xsize> <ysize>")
            print("These parameters are the size of the native version that we want to run.")
            print("")
            print("<target>")
            print("This parameter is the target for which we want to run <project>.")
            print("This parameter only works for a restricted set of targets and it requires an emulator.")
            print("")
            print("Examples:")
            print("xl run snake")
            print("It runs the previously built (e.g., with 'xl build snake') native version of Cross Snake.")
            print("")  
            print("xl run snake 16 16")
            print("It runs the previously built with size 16X16 (with 'xl size snake 16 16') native version of Cross Snake.")
        elif params[1]=="manual":
            print("xl manual")
            print("It displays and describes CROSS-LIB APIs")
        elif params[1]=="string":
            print("xl string <string>")
            print("It converts a string litteral into a concatenation of")
            print('_XL_A,..., _XL_Z, _XL_a, ..., _XL_z, _XL_SPACE, "0", ..., "9"')
            print("<string>")
            print("This parameter is the string to convert. It has to match the regular expression '[A-Za-z0-9 ]*'.")
            print("")
            print("Example:")
            print('xl string "1 Hello World 2"')
            print('"1" _XL_SPACE _XL_H _XL_e _XL_l _XL_l _XL_o _XL_SPACE _XL_W _XL_o _XL_r _XL_l _XL_d _XL_SPACE "2"')
        elif params[1]=="rebuild":
            print("xl rebuild <project> <[optional] target>")
            print("It rebuilds <project>.")
            print("It is equivalent to 'xl reset' followed by 'xl build <project> <target>'")
            print("Use 'xl help reset' and 'xl help build' for more information")
        elif params[1]=="import":
            print("xl import <source_file> <[optional] project>")
            print("")
            print("<source_file>")
            print("It is an Assembly or BASIC file (e.g., an Assembly file exported from CharPad or VChar64).")
            print("For example in CharPad you can export the tile data with:")
            print("File->Import/Export->Text/Asm->Export All or File->Import/Export->Text/Asm->Export All")
            print("")
            print("<project>")
            print("If a project name is passed then the tiles are imported into <project> as 8x8 tiles")
            print("")
            print("Remark: For extra heuristics and some BASIC files use '-rip' option or 'xl rip'")
            print("")
            print("Example:")
            print("If you create a new project 'myname' with")
            print("xl create myname")
            print("You can import a tile into it from an Assembly file with something like this:")
            print("xl import ./assets/examples/tile_sets/asm/tile_8x6_shapeA.txt myname")
        elif params[1]=="rip":
            print("xl rip <source_file> <[optional] project>")
            print("")
            print("<source_file>")
            print("It is an Assembly or BASIC file (e.g., an Assembly file exported from CharPad or VChar64).")
            print("For example in CharPad you can export the tile data with:")
            print("File->Import/Export->Text/Asm->Export All or File->Import/Export->Text/Asm->Export All")
            print("")
            print("<project>")
            print("If a project name is passed then the tiles are imported into <project> as 8x8 tiles")
            print("")
            print("Example:")
            print("If you create a new project 'myname' with")
            print("xl create myname")
            print("You can import a tile into it from an Assembly file with something like this:")
            print("xl rip ./assets/examples/tile_sets/asm/tile_8x6_shapeA.txt myname")
        elif params[1]=="rotate":
            print("xl rotate <source_file> <[optional] project>")
            print("")
            print("It works similarly to 'xl rip <source> <[optional] project>' but rotates the result.")
            print("")
            print("<source_file>")
            print("It is an Assembly or BASIC file (e.g., an Assembly file exported from CharPad or VChar64).")
            print("For example in CharPad you can export the tile data with:")
            print("File->Import/Export->Text/Asm->Export All or File->Import/Export->Text/Asm->Export All")
            print("")
            print("<project>")
            print("If a project name is passed then the tiles are imported into <project> as 8x8 tiles")
            print("")
            print("Example:")
            print("If you create a new project 'myname' with")
            print("xl create myname")
            print("You can import a tile into it from an Assembly file with something like this:")
            print("xl rotate ./assets/examples/tile_sets/asm/tile_8x6_shapeA.txt myname")
        elif params[1]=="tile":
            print("xl tile <shape_file> <[optional] project> <[optional] tile_index>")
            print("It converts the pictorial text file file <shape_file> into a line that can be used as an asset file.")
            print("")  
            print("<shape_file>")
            print("The file <shape_file> describes with '#' and '.' the shape of a tile.")
            print("")
            print("<project>")
            print("This optional parameter specifies the project whose tile we want to modify")
            print("")
            print("<tile_index>")
            print("This parameter is the index of the tile we want to modify")
            
            print("\nPress ENTER to continue...")
            time.sleep(1)

            if python_version < 3:
                raw_input()
            else:
                input()
                
            print("\nExample in 'src/examples/tiles/tile_shape0.txt':")
            print("...##...")
            print("..#..#..")
            print("...##...")
            print(".##..##.")
            print("#.####.#")
            print("# ####.#")
            print("..#..#..")
            print("..#..#..")
            print("")
            print("xl tile ./assets/examples/single_tiles/tile_shape0.txt")
            print("produces: ")
            print("24,36,24,102,189,189,36,36")
            print("")
            print("To be copied in 'tile_<index>.txt' in '<project>/tiles/8x8' to modify the shape.")
            print("Remark: run 'xl reset <project>' before rebuilding <project> with modified tiles.")

        elif params[1]=="shapes":
            print("xl shapes <project> <[optional] xsize> <[optional] ysize>")
            print("xl shapes <project> <[optional] target>")
            print("It converts all shape files into tiles and stores them as such in the project.") 
            print("It imports from files named 'shape<number>.txt' inside the directories in the 'shapes' directory of a given project")
            print("The shape file format is the one used by 'xl tile'. Run 'xl help tile' for more information.")
            print("If no optional parameter is passed, then 8x8 shape is assumed")
            print("If a target is passed as parameter it will guess xsize and ysize for that target.")
            print("")
            print("Example: ")
            print("Provided that you have a project named 'foo', the command")
            print("xl shapes foo 6 8")
            print("will import as tiles from all shape files 'shape<number>.txt' (found in './projects/foo/shapes/6x8') into './projects/foo/tiles/6x8/'")
            
        elif params[1]=="test":
            print("xl test <[optional] params>")
            print("It runs some operations to test 'xl'.")
            print("")
            print("<params>")
            print("If 'self' or nothing is passed to <params>, then it self-tests by performing a sequence of 'xl' commands.")
            print("If 'z88dk_targets' is passed to <params>, then it compiles a test program using Z88DK.")
            print("If 'z88dk_targets_quick' is passed to <params>, then it compiles a simplified test program using both Z88DK compilers.")
            print("If 'cc65_targets' is passed to <params>, then it compiles a test program using CC65.")
            print("If 'cmoc_targets' is passed to <params>, then it compiles a test program using CMOC.")
            print("If 'lcc1802_targets' is passed to <params>, then it compiles a test program using LCC1802.")
            print("If 'stdio' is passed to <params>, then it compiles a test program using only stdio.h and the native compiler (defined in config.ini).")
        elif params[1]=="debug" or params[1]=="d":
            print("xl debug <project> <XSize> <YSize>")
            print("It builds <project> for the native host in debug mode with screen size provided by <XSize> and <YSize>.")
            print("The built binaries will be in the 'build' directory.")

            print("\n<project>")
            print("<project> can also be 'games'/'examples'/'projects'/'all' to build multiple projects.")   
            
            print("\nxl debug bomber 20 20       \n  It builds Cross Bomber for the native host in debug mode with screen size 20x20.")
            print("\nxl debug examples 16 12     \n  It builds all examples for the native host in debug mode with screen size 16x12.")

            
        elif params[1]=="files" or params[1]=="f":
            print("xl files")
            print("It shows the built binary files (the conent of the `build` directory).")
            print("Remark: 'xl files' can be shorten with `xl f`.")
            
        elif params[1]=="build":
            print("xl build <project> <[optional] target>")
            print("It builds <project> for <target>.")
            print("Remark: The 'build' command can be omitted.")
            print("The built binaries will be in the 'build' directory.")

            print("\n<project>")
            print("<project> can also be 'games'/'examples'/'projects'/'all' to build multiple projects")   
            
            print("\n<target>")
            print("If no <target> is passed, then the native target (terminal console) is considered.")
            print("\nIf '<dev-kit>_targets' is passed as <target> (e.g., 'cc65_targets'), \nthen the given project/s is/are built for all targets that use <dev-kit> to be compiled.")
            print("Possible dev-kits are: 'cc65', 'z88dk', 'cmoc', 'lcc1802'.") 
            print("\n[NOT recommended] If 'all' is passed as <target>, then the given project/s is/are built for all targets (it may take very long and it requires all supported compilers.") 
            
            print("\nPress ENTER to continue...")
            time.sleep(1)

            if python_version < 3:
                raw_input()
            else:
                input()
            
            print("\nExamples:")
            print("\nxl build bomber vic20       \n  It builds Cross Bomber for the Commodore Vic 20 using CC65.")
            print("\nxl snake                    \n  It builds Cross Snake for the native target (terminal console).")
            print("\nxl chase cc65_targets       \n  It builds Cross Chase for all targets that use CC65 to be built.")
            print("\nxl games cpc                \n  It builds all games for the Amstrad CPC using Z88DK.")
            print("\nxl examples c64             \n  It builds all examples for the Commodore 64 using CC65.")
            print("\nxl horde all                \n  It builds Cross Horde for all its supported targets using all supported necessary compilers.")
            print("\nxl projects all             \n  It builds all built-in projects for all supported targets using all supported necessary compilers.")
            print("\nxl all c16                  \n  It builds all projects (games and examples and user-defined projects) for the Commodore 264 series using CC65.")
        elif params[1]=="create":
            print("xl create <project> <[optional] type>")
            print("It creates <project>.")
            
            print("\n<type>")
            print("If no <type> is passed, then the initial code will just display 'hello world'")
            print("If 'game' is passed as <type>, then the project is build with some initial template game code.")
            print("If 'apis' is passed as <type>, then the project is build with some code that shows how to use all APIs.")
            
            print("\nExamples:");
            print("\nxl create foo               \n  It builds a new project 'foo' with some initial code that display 'hello world' on the screen.")
            print("\nxl create bar game          \n  It builds a new project 'bar' with some initial game code (main loop, level loop, etc.).")
        elif params[1]=="delete":
            print("xl delete <project> <[optiona] interactive>")
            print("It removes <project>, i.e., it deletes its folder with its content (source code, graphics assets, makefile).")
            
            print("\n<project>")
            print("<project> cannot be a built-in project.")

            print("\n<interactive>")
            print("If '-y' is passed as <interactive>, then the command won't ask for confirmation.")

            print("\nExample:")
            print("\nxl delete foo               \n  It deletes the project 'foo'.")
            print("\nxl delete foo -y            \n  Same as above but no confirmation is asked.")   
        elif params[1]=="reset":
            print("xl reset <[optional] project>")
            print("It deletes temporary files created during the build process.")
            print("\n<project>")
            print("If no <project> is passed, only non-project specific temporary files are deleted.") 
            print("If the <project> parameter is used, then also project-specific temporary files are deleted (and in particular generated graphics assets).")

            
            print("\nExamples:")
            print("\nxl reset                    \n  It deletes non-project specific temporary files.")
            print("\nxl reset foo                \n  It deletes all temporary files (both generic and project-specific).")
        elif params[1]=="clean": 
            print("xl clean <[optional] project>")
            print("It deletes both built binaries and temporary files created during the build process.")
            print("\n<project>")
            print("If no <project> is passed, only built binaries and non-project specific temporary files are deleted.") 
            print("If the <project> parameter is used, then also project-specific temporary files are deleted (e.g., generated graphics assets).")
            
            print("\n<interactive>")
            print("If '-y' is passed as <interactive>, then the command won't ask for confirmation.")
            
            print("\nExamples:")
            print("\nxl clean                    \n  It deletes all built binaries and non-project specific temporary files.")
            print("\nxl clean foo                \n  It deletes all built-in binaries and all temporary files (both generic and project-specific).")

        elif params[1]=="list" or params[1]=="l":  
            print("xl list <[optional] params>")
            print("It lists current projects in a given category or all projects.")
            print("")
            print("<params>")
            print("If nothing is passed as <params> then all projects are built")
            print("If 'games','examples' or 'projects' is passed as <params> then only projects in the respective directory are listed")
            print("\nExamples:")
            print("xl list                       \n  It lists all projects (games, examples and new projects)")
            print("xl list projects              \n  It lists all user-defined projects") 
            
        elif params[1]=="commands":
            print("xl commands")
            print("It displays the available commands.")
            
        elif params[1]=="help" or params[1]=="h":
            print("xl help <[optional] command>")
            print("It displays help instructions.")
            
            
            print("\n<command>")
            help_help()
    else:
        print("Command not recognized")
        help_help()


def manual():
    run_command_verbosely("cat ../docs/CROSS_LIB_APIS.txt")

# ---------------------------------------------


# ---------------------------------------------
#  System               Value               
# ---------------------------------------------
#  Linux                linux or linux2 (*) 
#  Windows              win32               
#  Windows/Cygwin       cygwin              
#  Windows/MSYS2        msys                
#  Mac OS X             darwin              
#  OS/2                 os2                 
#  OS/2 EMX             os2emx              
#  RiscOS               riscos              
#  AtheOS               atheos              
#  FreeBSD 7            freebsd7            
#  FreeBSD 8            freebsd8            
#  FreeBSD N            freebsdN            
#  OpenBSD 6            openbsd6            
# ---------------------------------------------

def read_config_option(section, option):
        if config.has_option(section,option):
            return config.get(section,option)
        else:
            return ""

def read_config():
    if python_version==2:
        import ConfigParser
        
        global verbose
        
        global compilation_threads
        global sccz80_compiler_opts 
        global zsdcc_compiler_opts
        global cmoc_compiler_opts

        global native_compiler
        
        global tool_compiler     
        
        global interactive_clean
        
        global vice_path
        global vice_rom_path
        
        global mame_path
        global mame_rom_path
        
        global extend_algorithm
        
        global replace_shapes
        
        global use_tools
        
        global config 
        
        config = ConfigParser.SafeConfigParser()
    else:
        import configparser

        config = configparser.ConfigParser()
    try:
        config.read('config.ini')
        
        verbose = read_config_option("verbosity","verbose")
        if verbose!="":
            verbose=int(verbose)
        else:
            verbose=0
        if verbose:
            print("Verbose Mode ON")
        # else:
            # print("Verbose Mode OFF")

        if verbose:
            print("Config file found with: " + str(config.sections()))
            print("")
        
        compilation_threads = read_config_option("build","threads") 
        if compilation_threads=="auto" or compilation_threads=="automaic":
            if verbose:
                print("Detecting number of threads...")
            import multiprocessing
            compilation_threads = str(multiprocessing.cpu_count())
            if verbose:
                print("Detected " + compilation_threads + " threads...")

        sccz80_compiler_opts = read_config_option("build","sccz80_compiler_opts") 
        zsdcc_compiler_opts = read_config_option("build","zsdcc_compiler_opts")
        cmoc_compiler_opts = read_config_option("build","cmoc_compiler_opts")
        
        native_compiler = read_config_option("build", "native_compiler")
        
        tool_compiler = read_config_option("tools", "tool_compiler")
        
        interactive_clean = read_config_option("clean", "interactive")
        
        vice_path = read_config_option("run", "vice_path")
        vice_rom_path = read_config_option("run", "vice_rom_path")
        
        mame_path = read_config_option("run", "mame_path")
        mame_rom_path = read_config_option("run", "mame_rom_path")
        
        extend_algorithm = read_config_option("extend", "extend_algorithm")
        
        replace_shapes = read_config_option("extend", "replace_shapes")
        
        use_tools = read_config_option("build", "use_tools")
        
        if interactive_clean!="":
            interactive_clean = int(interactive_clean)
        
        if replace_shapes!="":
            replace_shapes = int(replace_shapes)

        if use_tools!="":
            use_tools = int(use_tools)
        
    except Exception as e:
        print("An exception occurred while reading the configuration: " + str(e))
        raise
        # TODO: Ask the user to continue or exit
    else:
        if verbose:
            print("config.ini OK")
            print("")


def default_config():
    global verbose
    
    global compilation_threads
    global sccz80_compiler_opts 
    global zsdcc_compiler_opts
    global cmoc_compiler_opts

    global native_compiler
    
    global tool_compiler     
    
    global interactive_clean
    
    global vice_path
    global vice_rom_path
    
    global mame_path
    global mame_rom_path
    
    global extend_algorithm
    
    global replace_shapes
    
    global use_tools
        
    verbose = True 
    compiler_opts = ""
    compilation_threads = 1
    zsdcc_compiler_opts = ""
    sccz80_compiler_opts = ""
    cmoc_compiler_opts = ""
    native_compiler = "gcc"
    tool_compiler = "gcc"  
    use_tools = 0


# ---------------------------------------------
if __name__ == "__main__":
    try:
        platform = sys.platform

        if(platform in ["cygwin", "linux", "linux2", "darwin", "msys", "msys2", "win32"]):
            GNU_MAKE="make"
        else:
            GNU_MAKE="gmake"

        if(platform in ["cygwin", "msys"]):
            NATIVE_EXTENSION="exe"
        else:
            NATIVE_EXTENSION="out"
        
        if python_version<=2 and python_subversion<7:
            print("Python version not supported")
            exit()
        try:
            read_config()
        except:
            default_config()

        if verbose:
            print("----------------------------")
            print("Cross-Lib `xl` helper script")
            print("----------------------------")
            print("Platform: " + platform)
            print("Python:   " + str(python_version) + "." + str(python_subversion))

                
            print("GNU MAKE command: " + GNU_MAKE)
            print("----------------------------")
            print("")

        
        if len(sys.argv)<2:
            print("You need to provide a command or a project name")
            help(sys.argv[1:])
            exit()
            
        params = sys.argv
        
        params = full_params(params)
            
        if params[1]=="run":
            run(params[1:])
        elif params[1]=="add":
            add(params[1:])
        elif params[1]=="remove":
            remove(params[1:])
        elif params[1]=="string":
            string(params[1:])
        elif params[1]=="commands":
            commands(params[1:])
        elif params[1]=="import":
            import_from_source(params[1:],False)
        elif params[1]=="rotate":
            rip(params[1:],True)
        elif params[1]=="rip":
            rip(params[1:],False)
        elif params[1]=="rebuild":
            rebuild(params[1:])
        elif params[1]=="make":
            shapes(params[1:]);
            rebuild(params[1:])    
        elif params[1]=="rename":
            rename(params[1:])
        elif params[1]=="clone":
            clone(params[1:])
        elif params[1]=="show":
            show(params[1:])
        elif params[1]=="test":
            test(params[1:])
        elif params[1]=="tile":
            tile(params[1:])
        elif params[1]=="shapes":
            shapes(params[1:])
        elif params[1]=="extend":
            extend(params[1:])
        elif params[1]=="build":
            build(params[1:])
        elif params[1]=="manual":
            manual()
        elif params[1]=="files":
            files()
        elif params[1]=="size":
            size(params[1:],0)
        elif params[1]=="debug":
            size(params[1:],1)
        elif params[1]=="create":
            create(params[1:])
        elif params[1]=="clean":
            if interactive_clean:
                clean(params[1:])
            else:
                clean(params[1:]+["-y"])
        elif params[1]=="reset":
            reset(params[1:])
        elif params[1]=="delete":
            delete(params[1:])
        elif params[1]=="list":
            list(params[1:])
        elif params[1]=="help":
            help(params[1:])
        elif params[1]=="tools":
            tools()
        else:
            build(params)
    except:
        print("An error has occured!")
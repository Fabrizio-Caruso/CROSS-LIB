#!/usr/bin/env python

from __future__ import print_function

import datetime
import shutil
import os
import sys
import time

from os import walk
from inspect import signature

sys.path.append("modules")

from modules.strings import *
from modules.import_from_source import *
from modules.tiles import *
from modules.LoggerSingleton import LoggerSingleton
from modules.init import *
from modules.default_values import insert_default_sizes
from modules.params import handle_two_letter_params, full_params, COMMANDS_LIST, get_size_params
from modules.help_functions import help_command, manual
from modules.file_functions import files, convert_makefile, files_in_path, dirs_in_path, built_files_in_path, list_of_projects, list_projects
from modules.tests import *
from modules.split_projects import *
from modules.run import run_command, run
from modules.commands import commands
from modules.input_functions import generic_input, are_you_sure
from modules.option_functions import *
from modules.project_functions import rename, clone, create, delete
from modules.target_defs import *
from modules.shape_functions import *
from modules.clean_functions import clean, clean_test
from modules.build_functions import *


logger = LoggerSingleton.initLogger('xl', '../logs')
logger.info('Started')


def get_params_from_keyboard_input():
    logger.info("Interactive mode ON")
    print("For more commands, use the non-interactive mode.")
    printc(option_config, bcolors.BOLD, "xl help")
    print(" for instructions.")
    print("")
    print("--------------------------------------------------")
    printc(option_config, bcolors.OKCYAN, "Interactive mode\n")
    print("--------------------------------------------------")
    print("")

    project_name = generic_input("Insert project to build\n")

    if project_name in ("", "\n"):
        project_name="helloworld"
        printc(option_config, bcolors.WARNING,"Defaulting to helloworld\n")
    print("")

    target_name = generic_input("Insert target name\n")
    if target_name in ("", "\n"):
        target_name="ncurses"
        printc(option_config, bcolors.WARNING, "Defaulting to ncurses\n")
    print("")

    return ["", "rebuild", project_name, target_name]
    

def get_params_from_command_line():
    logger.info("Interactive mode OFF")
    params = sys.argv
    params = handle_two_letter_params(params)
    return full_params(params)


if __name__ == "__main__":

    if python_version<2 or (python_version<=2 and python_subversion<7):
        print("Python version not supported")
        logger.error("Python version not supported")
        sys.exit(-1)
    try:
        option_config = read_config()
        logger.info("(read_config) Configuration file read")
    except:
        if option_config.terminal_config.verbose:
            print("Failed to read config.ini")
        logger.warning("Reverting to default configuration")
        option_config = default_config()
        print("WARNING: Using default config")

    make_test = test_make(option_config, silent=True)

    if option_config.build_config.gnu_make == "auto":
        if option_config.terminal_config.verbose:
            print("automatic detection of GNU make")
        if make_test['gmake']:
            option_config.build_config.gnu_make = "gmake"
        else:
            option_config.build_config.gnu_make = "make"
    GNU_MAKE = option_config.build_config.gnu_make

    if option_config.build_config.parallelize_multi_build:
        if option_config.terminal_config.verbose:
            print("Parallelize_multi_build is ON")
        logger.info("Parallelize_multi_build is ON")
        from multiprocessing import Pool
    else:
        logger.info("Parallelize_multi_build is OFF")

    if option_config.terminal_config.verbose:
        logger.info("Verbose mode ON")
        print("----------------------------")
        print("----------------------------")
        print("Platform: " + platform)
        print("Python:   " + str(python_version) + "." + str(python_subversion))
        logger.info("Using Python version %s.%s", str(python_version), str(python_subversion))

        print("GNU MAKE command: " + GNU_MAKE)
        print("----------------------------")
        print("")

    params = get_params_from_keyboard_input() if (len(sys.argv)<2) else get_params_from_command_line()

    command_name = "build" if params[1] in list_of_projects("all") + \
                   ["examples"] + ["games"] + ["projects"] + ["all"] else params[1]
                   
    logger.info("Command : %s", command_name)

    normalized_name = command_name.replace("list","list_projects").replace("help", "help_command").replace("import", "import_from_source")

    if command_name in COMMANDS_LIST:
        params_string = ", params[1:]" if len(signature(eval(normalized_name)).parameters)>1 else ""
        eval(normalized_name+"(option_config" + params_string + ")")
    elif params[1] in list_of_projects("all") + ["examples"] + ["games"] + ["projects"] + ["all"]:
        build(option_config, params)
    else:
        manual(option_config, params)

    logger.info('Finished')

    os.system('mv ../logs/log.log ../logs/log_' + \
              datetime.datetime.now().strftime("%Y-%m-%d_%H_%M_%S")+'.log 2>/dev/null' )

# -----------------------------------------------
# Z88DK

z88dk_alt_targets_a-n: \
    abc80_alt_targets \
    ace_alt_targets \
    aussie_alt_targets \
    c128_z80_alt_targets \
    camputers_alt_targets \
    cpm_z80_alt_targets \
    eg2k_alt_targets \
    fp1100_alt_targets \
    g800_alt_targets \
    lambda_alt_targets \
    m5_alt_targets \
    mc1000_alt_targets \
    microbee_alt_targets \
    msx_alt_targets \
    mtx_alt_targets \
    multi8_alt_targets \
    nascom_alt_targets 


#############################

abc80_alt_targets: \
    abc80_tiny


ace_alt_targets: \
    ace_exp_16k_no_gfx

aussie_alt_targets: \
    aussie_buffered

c128_z80_alt_targets: \
    c128_z80_40col_turn_based

camputers_alt_targets: \
    camputers_lynx_tiny

cpm_z80_alt_targets: \
    cpm_z80_tiny_buffered \
    cpm_z80_buffered \
    cpm_z80_vt52 \
    cpm_z80_vt100

cpc_alt_targets: \
    cpc_no_udg

eg2k_alt_targets: \
    eg2k_no_gfx

fp1100_alt_targets: \
    fp1100_tiny

g800_alt_targets: \
    g800_tiny_turn_based

lambda_alt_targets: \
    lambda_8k \
    lambda_light

m5_alt_targets: \
    m5_no_gfx \
    m5_tiny_no_gfx

mc1000_alt_targets: \
    mc1000_16k_light

microbee_alt_targets: \
    microbee_32k_no_gfx \
    microbee_32k_wav

msx_alt_targets: \
    msx_32k_cas

mtx_alt_targets: \
    mtx_no_gfx \
    mtx_16k_no_gfx

multi8_alt_targets: \
    multi8_light_udg \
    multi8_tiny_udg

nascom_alt_targets: \
    nascom_32k_turn_based


#############################
# ABC80

abc80_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +abc80 $(SCCZ80_OPTS) -lm -subtype=hex -zorg=49200 $(INCLUDE_OPTS) \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DTINY_GAME -DNO_WALL \
	-D_XL_NO_WAIT \
	-D__ABC80__ -clib=ansi -vn  -lndos -create-app -o abc80t.bin \
	$(TINY_FILES)
	rm abc80t.bin
	mv abc80t.ihx $(BUILD_PATH)/ALT_TINY_abc80.ihx 


#############################
# ACE
ace_exp_16k_no_gfx:
	$(Z88DK_PATH)$(MYZ88DK) +ace $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__ACE__ -DFULL_GAME -DBETWEEN_LEVEL -DEND_SCREEN \
	 \
	-DCONIO -DNO_INIT_GRAPHICS \
	-clib=ansi -o acengfx.bin -Cz--audio -create-app \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	cp acengfx.wav $(BUILD_PATH)/ALT_FULL_ace_exp_16k_no_gfx.wav
	rm acengfx.wav
	rm acengfx.tap
	rm acengfx.bin


#############################
# AUSSIE
aussie_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) -laussie  \
	$(INCLUDE_OPTS) \
	-vn \
	-D__AUSSIE__ \
	 \
	-DFORCE_BIT_BANG \
	-DXSize=16 \
	-DYSize=12 \
	-D_XL_NO_COLOR \
	-DFULL_GAME \
	-DTURN_BASED \
	-DBUFFERED \
	-DNO_INIT_GRAPHICS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES) \
	-create-app -o aussieb.bin
	rm aussieb.bin
	mv aussieb.COM $(BUILD_PATH)/ALT_FULL_aussie_buffered.COM


#############################
# C128 Z80
c128_z80_40col_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +c128 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-lndos -subtype=disk \
	-D__C128_Z80__ -DXSize=40 \
	-DFULL_GAME -DEND_SCREEN \
	-DTURN_BASED \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES) \
	-create-app -oa80tb.bin
	$(TOOLS_PATH)/generic/c1541 -format "crosschase,0" d64 ALT_FULL_c128_z80_40col_turn_based.d64
	$(TOOLS_PATH)/generic/c1541 -attach ALT_FULL_c128_z80_40col_turn_based.d64 -write a80tb.ldr
	$(TOOLS_PATH)/generic/c1541 -attach ALT_FULL_c128_z80_40col_turn_based.d64 -write a80tb
	mv ALT_FULL_c128_z80_40col_turn_based.d64 $(BUILD_PATH)/
	rm A80TB.LDR
	rm A80TB
	rm a80tb.bin



#############################
# CAMPUTERS LYNX
camputers_lynx_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +lynx $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-pragma-redirect:fputc_cons=fputc_cons_generic \
	-pragma-redirect:getk=getk_inkey \
	-D__CAMPUTERS_LYNX__ \
	-vn \
	-DCONIO_VT52 \
	-D_XL_NO_COLOR \
	-DTINY_GAME -DNO_WALL \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(TINY_FILES) \
	-create-app -o $(BUILD_PATH)/ALT_TINY_camputers_lynx.bin
	rm $(BUILD_PATH)/ALT_TINY_camputers_lynx.bin


#############################
# CPM


cpm_z80_tiny_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DSTDLIB \
	-DXSize=24 \
	-DYSize=16 \
	-D_XL_NO_COLOR \
	-DTINY_GAME -DNO_WALL \
	-DTURN_BASED \
	-DBUFFERED \
	-DNO_INIT_GRAPHICS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(TINY_FILES) \
	-create-app -o$(BUILD_PATH)/ALT_FULL_cpm_z80_tiny_buffered.bin 
	rm $(BUILD_PATH)/ALT_FULL_cpm_z80_tiny_buffered.bin 


# cannot run in Mame (Kaypro 2x)
cpm_z80_buffered:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DSTDLIB \
	-DXSize=24 \
	-DYSize=16 \
	-D_XL_NO_COLOR \
	-DFULL_GAME \
	-DTURN_BASED \
	-DBUFFERED \
	-DNO_INIT_GRAPHICS \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(FULL_FILES) \
	-create-app -o$(BUILD_PATH)/ALT_FULL_cpm_z80_buffered.bin 
	rm $(BUILD_PATH)/ALT_FULL_cpm_z80_buffered.bin 


cpm_z80_vt52:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DCONIO_VT52 \
	-D__CPM_80X24__ \
	-DFULL_GAME -DLESS_TEXT -D_XL_NO_SLEEP -D_XL_NO_WAIT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/ALT_FULL_cpm_vt52.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/ALT_FULL_cpm_vt52.bin	


cpm_z80_vt100:
	$(Z88DK_PATH)$(MYZ88DK) +cpm $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-DCONIO_VT100 \
	-D__CPM_80X24__ \
	-DFULL_GAME -DLESS_TEXT -D_XL_NO_SLEEP -D_XL_NO_WAIT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-create-app -o$(BUILD_PATH)/ALT_FULL_cpm_vt100.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/ALT_FULL_cpm_vt100.bin	


#############################
# EG2K
eg2k_no_gfx:
	$(Z88DK_PATH)$(MYZ88DK) +trs80 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-D__EG2K__ \
	-subtype=eg2000disk \
	-lndos \
	-lm \
	-D__TRS80__ \
	-DCONIO -DNO_INIT_GRAPHICS \
	-DFULL_GAME -DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO_VT52 \
	-create-app -o eg2kngfx.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	mv eg2kngfx.cmd $(BUILD_PATH)/ALT_FULL_eg2k_no_gfx.cmd
	rm eg2kngfx.bin


#############################
# FP1100
fp1100_tiny:
	$(Z88DK_PATH)$(MYZ88DK) +fp1100 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-pragma-redirect:fputc_cons=fputc_cons_generic \
	-D__FP1100__ -vn \
	-DCONIO_VT52 \
	-DTINY_GAME -DNO_WALL  \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(TINY_FILES) \
	-create-app -o fp1100t.bin
	mv fp1100t.d88 $(BUILD_PATH)/ALT_TINY_fp1100.d88
	rm fp1100t.bin
	rm fp1100t_BOOTSTRAP.bin


#############################
# G800
g800_tiny_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +g800 $(SCCZ80_OPTS) -clib=g850b $(INCLUDE_OPTS) \
	-D__G800__ \
	-DTURN_BASED \
	-DNO_BLINKING \
	-vn \
	-DFORCE_CONIO_LIB \
	-DTINY_GAME -DNO_WALL \
	-lndos \
	-DCONIO -DNO_INIT_GRAPHICS \
	$(TINY_FILES) \
	-create-app -o g800ttb.bin
	rm g800ttb.bin
	rm g800ttb.rom
	mv g800ttb.ihx $(BUILD_PATH)/ALT_TINY_g800_turn_based.ihx


#############################
# LAMBDA
lambda_8k:
	$(Z88DK_PATH)$(MYZ88DK) +lambda $(SCCZ80_OPTS) $(INCLUDE_OPTS) -vn -D__LAMBDA__ -DTINY_GAME -DNO_WALL -DNO_SET_SCREEN_COLORS \
	-DLESS_TEXT -D_XL_NO_SLEEP -lndos -DCONIO -DNO_INIT_GRAPHICS \
	-create-app -o  $(BUILD_PATH)/ALT_TINY_lambda_8k.prg \
	$(TINY_FILES)
	rm $(BUILD_PATH)/ALT_TINY_lambda_8k.prg


lambda_light:
	$(Z88DK_PATH)$(MYZ88DK) +lambda $(SCCZ80_OPTS) -vn -D__LAMBDA__ -lndos -create-app -o  $(BUILD_PATH)/ALT_LIGHT_lambda.prg \
	$(INCLUDE_OPTS) $(LIGHT_FILES) -DCONIO -DNO_INIT_GRAPHICS
	rm $(BUILD_PATH)/ALT_LIGHT_lambda.prg


#############################
# M5
m5_no_gfx:
	$(Z88DK_PATH)$(MYZ88DK) +m5 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-lm -create-app -Cz--audio -subtype=tape \
	-pragma-define:REGISTER_SP=65000 \
	-D__M5__ \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-DFULL_GAME -DLESS_TEXT -D_XL_NO_SLEEP -D_XL_NO_WAIT \
	-DBETWEEN_LEVEL -DEND_SCREEN \
	-DCONIO -DNO_INIT_GRAPHICS \
	-o$(BUILD_PATH)/ALT_FULL_m5_no_gfx.bin \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/ALT_FULL_m5_no_gfx.bin
	rm $(BUILD_PATH)/ALT_FULL_m5_no_gfx.cas


m5_tiny_no_gfx:
	$(Z88DK_PATH)$(MYZ88DK) +m5 $(SCCZ80_OPTS) \
	$(INCLUDE_OPTS) \
	-lm -create-app -Cz--audio -subtype=tape \
	-D__M5__ \
	-clib=ansi -pragma-define:ansicolumns=32 \
	-DTINY_GAME -DNO_WALL -DLESS_TEXT \
	-DCONIO -DNO_INIT_GRAPHICS \
	-o$(BUILD_PATH)/ALT_TINY_m5_no_gfx.bin \
	$(TINY_FILES)
	rm $(BUILD_PATH)/ALT_TINY_m5_no_gfx.bin
	rm $(BUILD_PATH)/ALT_TINY_m5_no_gfx.cas


#############################
# MC1000
mc1000_16k_light:
	$(Z88DK_PATH)$(MYZ88DK) +mc1000 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-pragma-define:ansicolumns=32 -subtype=gaming -clib=ansi -D__MC1000__  -vn \
	-lndos \
	-create-app -o mc1000l.bin \
	-Cz--audio -DCONIO -DNO_INIT_GRAPHICS \
	$(LIGHT_FILES)
	mv mc1000l.wav $(BUILD_PATH)/ALT_LIGHT_mc1000_16k.wav
	rm mc1000l.bin
	rm mc1000l.cas


#############################
# MICRO
microbee_32k_no_gfx:
	$(Z88DK_PATH)$(MYZ88DK) +bee $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__BEE__ \
	-clib=ansi \
	-vn \
	-DFULL_GAME   -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/ALT_FULL_microbee_32k_no_gfx.prg  \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/ALT_FULL_microbee_32k_no_gfx.prg


microbee_32k_wav:
	$(Z88DK_PATH)$(MYZ88DK) +bee $(SCCZ80_OPTS) $(INCLUDE_OPTS) -subtype=wav \
	-D__BEE__ \
	-clib=ansi \
	-vn \
	-DFULL_GAME   -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/ALT_FULL_microbee_32k_wav.prg  \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/ALT_FULL_microbee_32k_wav.prg


#############################
# MSX
msx_32k_cas: $(ASSETS_PATH)/8x8_chars.h
	$(Z88DK_PATH)$(MYZ88DK) +msx $(SCCZ80_ROM_OPTS) $(INCLUDE_OPTS) -lmsxbios \
	-DUSE_MSX_BIOS \
	-DINITIAL_SLOWDOWN=29000 \
	 -DANIMATE_PLAYER \
	-vn -DMSX_VPOKE -DFULL_GAME -D__MSX__ -DEND_SCREEN -DBETWEEN_LEVEL \
	-lndos \
	-create-app -o $(BUILD_PATH)/ALT_FULL_msx_32k.prg \
	-DMEMORY_MAPPED \
	-DALT_PRINT \
	-DDEFAULT_CLEAR_SCREEN \
	-DLESS_TEXT \
	-DZ88DK_JOYSTICK \
	$(CROSS_LIB_PATH)/display/alt_print/memory_mapped_alt_print.c \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/msx/msx_redefined_chars_init_graphics.c	\
	$(CROSS_LIB_PATH)/sound/z88dk/psg/ay-3-8910_psg_sounds.c \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/ALT_FULL_msx_32k.prg 


#############################
# MTX
mtx_no_gfx:
	$(Z88DK_PATH)$(MYZ88DK) +mtx $(SCCZ80_OPTS) -startup=2 $(INCLUDE_OPTS) \
	-D__MTX__ -clib=ansi -pragma-define:ansicolumns=32 -create-app -o ALT_FULL_mtx_no_gfx.bin \
	-DFULL_GAME   -DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm ALT_FULL_mtx_no_gfx
	rm ALT_FULL_mtx_no_gfx.bin
	mv ALT_FULL_mtx_no_gfx.wav $(BUILD_PATH)/



# it may work
mtx_16k_no_gfx:
	$(Z88DK_PATH)$(MYZ88DK) +mtx $(SCCZ80_OPTS) -startup=2 $(INCLUDE_OPTS) -D__MTX__ \
	-clib=ansi -pragma-define:ansicolumns=32 -vn -DCONIO -DNO_INIT_GRAPHICS -lndos -create-app -o ALT_LIGHT_mtx_no_gfx.bin \
	$(LIGHT_FILES)
	rm ALT_LIGHT_mtx_no_gfx
	rm ALT_LIGHT_mtx_no_gfx.bin
	mv ALT_LIGHT_mtx_no_gfx.wav $(BUILD_PATH)


#############################
# MULTI
multi8_light_udg: $(ASSETS_PATH)/z88dk_xchase.asm
	$(Z88DK_PATH)$(MYZ88DK) +multi8 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__MULTI8__ \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(ASSETS_PATH)/z88dk_xchase.asm \
	$(LIGHT_FILES) \
	-create-app -o$(BUILD_PATH)/ALT_LIGHT_multi8.bin
	rm $(BUILD_PATH)/ALT_LIGHT_multi8.bin


multi8_tiny_udg: $(ASSETS_PATH)/z88dk_xchase.asm
	$(Z88DK_PATH)$(MYZ88DK) +multi8 $(SCCZ80_OPTS) $(INCLUDE_OPTS) \
	-D__MULTI8__ \
	-DTINY_GAME -DNO_WALL  \
	-DCONIO_VT52 \
	-DCONIO \
	-lndos \
	-DANIMATE_PLAYER \
	-DUDG_GRAPHICS \
	-clib=default -pragma-redirect:fputc_cons=fputc_cons_generic \
	$(CROSS_LIB_PATH)/display/init_graphics/z88dk/udg/udg_init_graphics.c \
	$(ASSETS_PATH)/z88dk_xchase.asm \
	$(TINY_FILES) \
	-create-app -o$(BUILD_PATH)/ALT_TINY_multi8.bin
	rm $(BUILD_PATH)/ALT_TINY_multi8.bin


#############################
# NASCOM
nascom_32k_turn_based:
	$(Z88DK_PATH)$(MYZ88DK) +nascom $(SCCZ80_OPTS) $(INCLUDE_OPTS) -clib=ansi -vn -lndos \
	-D__NASCOM__ \
	-DTURN_BASED \
	 \
	-DFULL_GAME \
	-DEND_SCREEN -DBETWEEN_LEVEL \
	-DCONIO -DNO_INIT_GRAPHICS \
	-lndos -create-app -o $(BUILD_PATH)/ALT_FULL_nascom_32k_turn_based.prg \
	$(SOURCE_PATH)/end_screen.c \
	$(FULL_FILES)
	rm $(BUILD_PATH)/ALT_FULL_nascom_32k_turn_based.prg


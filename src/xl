#!/usr/bin/env python

DEBUG_TARGET  = "ncurses_debug"

NATIVE_TARGET = "ncurses_debug"

NUMBER_OF_TILES = 26

# Patterns used to rip and import tile data
ONE_REPPRESENTATIONS = ["#","*","X","x","1","+","@","$","O","o"]
ASSEMBLY_EXTENSIONS = [".s",".asm",".a99",".as", ".acme"]
BASIC_EXTENSIONS    = [".bas", ".lb", ".b", ".lst"]
BYTE_PATTERN_LIST = [".byte","!byte","defb","fcb","db","dc.b","byte",".BYTE","!BYTE","DEFB","FCB","DB","DC.B","BYTE","!Byte",".Byte"] 
WORD_PATTERN_LIST = [".word","!word","defw","fcw","dw","dc.w","data",".WORD","!WORD","DEFW","FCW","DW","DC.W","DATA","!Word",".Word"] 
ASSEMBLY_PATTERN_LIST = BYTE_PATTERN_LIST + WORD_PATTERN_LIST
BASIC_ONLY_NO_SKIP_PATTERN_LIST = ["dA", "BIN", "d.", "D."] 
BASIC_ONLY_SKIP_PATTERN_LIST = [ "symbol", "SYMBOL", "vdu 23,", "VDU 23,", "vdu23,", "VDU23,"]
BASIC_ONLY_PATTERN_LIST = BASIC_ONLY_NO_SKIP_PATTERN_LIST + BASIC_ONLY_SKIP_PATTERN_LIST
PATTERN_LIST = ASSEMBLY_PATTERN_LIST + BASIC_ONLY_PATTERN_LIST
SKIP_PATTERN_LIST = BASIC_ONLY_SKIP_PATTERN_LIST


import shutil

import os,sys,re

import time

from os import walk

COMMANDS_LIST = \
    [ \
    "build", "clean", "create", "c", "delete", "help", "h", \
    "list", "l", "reset", "debug", "d", "test", "tile", \
    "rebuild", "import", "resize", "show", "string", "run", "r" \
    ]

def are_you_sure():
    if sys.version_info[0] < 3:
        return raw_input("Are you sure [Y/N]? ").lower()
    else:
        return input("Are you sure [Y/N]? ").lower()


def dirs_in_path(mypath):
    projects = []
    for (dirpath, dirnames, filenames) in walk(mypath):
        projects.extend(dirnames)
        break
    return projects


def multiple_debug_run(mypath,target,xsize,ysize,debug):
    projects = []
    for (dirpath, dirnames, filenames) in walk(mypath):
        projects.extend(dirnames)
        break
            
    for project_name in projects:
        make_command = \
            GNU_MAKE + " " + target + " XSIZE=" + xsize +  " YSIZE=" + ysize + " _DEBUG_FLAG=" + str(debug) + \
                " -f " + mypath+"/"+project_name+"/Makefile."+project_name;
                
        print("run command : " + make_command)
        print("\n")
        
        os.system(make_command)


def multiple_run(mypath,target,threads,optimization):
    projects = []
    for (dirpath, dirnames, filenames) in walk(mypath):
        projects.extend(dirnames)
        break
            
    for project_name in projects:
        make_command = \
            GNU_MAKE + " " + target + \
                " ZSDCC_MAKEFILE_THREADS_OPTS=\'-j " + threads + "'" \
                " ZSDCC_MAKEFILE_COMPILATION_OPTS=" + optimization + \
                " -f " + mypath+"/"+project_name+"/Makefile."+project_name;

        print("run command : " + make_command)
        print("\n")
        
        os.system(make_command)


def only_upper_and_digits(s):
    return "".join(c for c in s if c.isupper() or c in ["0","1","2","3","4","5","6","7","8","9"])


def only_upper_digits_and_space(s):
    return "".join(c for c in s if c.isupper() or c in [" ", "0","1","2","3","4","5","6","7","8","9"])


def no_space(s):
    return "".join(c for c in s if c!=" ")


def project_category(game_dir):
    if(game_dir in example_projects):
        return "example"
    elif game_dir in game_projects:
        return "game" 
    else:
        return "project" 
    

def string(params):
    string = params[1]
    m = re.search('[a-zA-Z0-9 ]*',string)
    string = m.group(0)
    
    string = string.replace(" ", "@")
    converted_string = ""
    
    for ch in string:
        converted_string+= "_XL_"+ch+" "
    
    converted_string = converted_string.replace("_XL_@", "_XL_SPACE")
    
    for i in range(9):
        converted_string = converted_string.replace("_XL_"+str(i),'"'+str(i)+'"')
    
    print(converted_string)


def resize(params,debug):

    if len(params)<2:
        game_dir = "helloworld"
    else:
        game_dir = params[1]

    project_type = project_category(game_dir)

    parent_dir = project_type + "s"

    xsize = params[2]
    ysize = params[3]

    target = NATIVE_TARGET

    print("Project name       : " + game_dir)
    print("Project type       : " + project_type)
    print("XSize: " + xsize)
    print("YSize: " + ysize)

    parent_and_game_dir = parent_dir + "/" + game_dir

    if(game_dir not in ["games", "examples", "projects", "all"]):
        if not os.path.exists(parent_and_game_dir):
            print("Project not found!")
            exit();

        make_command = \
            GNU_MAKE + " " + target + " XSIZE=" + xsize +  " YSIZE=" + ysize + " _DEBUG_FLAG=" + str(debug) +  \
                " -f " + parent_dir+"/"+game_dir+"/Makefile."+game_dir;

        print("run command : " + make_command)
        print("\n")

        os.system(make_command)
    else:
        if game_dir in["games","examples","projects"]:
            multiple_debug_run(game_dir,target,xsize,ysize,debug)
        elif game_dir in["new"]:
            multiple_debug_run("projects",target,xsize,ysize,debug)
        elif game_dir in["builtin","built-in"]:
            multiple_debug_run("games",target,xsize,ysize,debug)
            multiple_debug_run("examples",target,xsize,ysize,debug)
        elif game_dir=="all":
            multiple_debug_run("games",target,xsize,ysize,debug)
            multiple_debug_run("examples",target,xsize,ysize,debug)
            multiple_debug_run("projects",target,xsize,ysize,debug)
        else:
            exit()


def rebuild(params):
    reset(params)
    build(params)


def build(params):

    if len(params)<2:
        game_dir = "helloworld"
    else:
        game_dir = params[1]

    project_type = project_category(game_dir)
    parent_dir = project_type + "s"

    if len(params)<3:
        target = "ncurses"
    else:
        target = params[2]

    if len(params)<4:
        threads = "8"
    else:
        threads = params[3]


    if len(params)>=5 and params[4]=="on":
        optimization = "--max-allocs-per-node200000"
    else:
        optimization = ""

    if len(params)>=6:
        compiler_opts = params[5]
    else:
        compiler_opts = ""

    print("Project name       : " + game_dir)
    print("Project type       : " + project_type)
    print("Number of threads  : " + threads)
    print("Extra optimization : " + optimization)
    print("Compiler's options : " + compiler_opts)


    parent_and_game_dir = parent_dir + "/" + game_dir

    if(game_dir not in ["games", "examples", "projects", "all"]):
        if not os.path.exists(parent_and_game_dir):
            print("Project not found!")
            exit();

        make_command = \
            GNU_MAKE + " " + target + \
                " ZSDCC_MAKEFILE_THREADS_OPTS=\'-j " + threads + "'" \
                " ZSDCC_MAKEFILE_COMPILATION_OPTS=" + optimization + \
                compiler_opts +                                      \
                " -f " + parent_dir+"/"+game_dir+"/Makefile."+game_dir;

        print("run command : " + make_command)
        print("\n")

        os.system(make_command)
        
    else:
        if game_dir in ["games","examples","projects"]:
            multiple_run(game_dir,target,threads,optimization)
        elif game_dir=="new":
            multiple_run("projects",target,threads,optimization)
        elif game_dir in ["builtin","built-in"]:
            multiple_run("games",target,threads,optimization)
            multiple_run("examples",target,threads,optimization)
        elif game_dir=="all":
            multiple_run("games",target,threads,optimization)
            multiple_run("examples",target,threads,optimization)
            multiple_run("projects",target,threads,optimization)
        else:
            exit()     


def create(params):
    if len(params)<2:
        game_dir = "helloworld"
    else:
        game_dir = params[1]
        game_dir_capital = game_dir.upper()        
        game_dir_capital_without_special_chars = only_upper_digits_and_space(game_dir.upper().replace("-"," ").replace("_"," "))
        
        game_dir = no_space(game_dir)
        
        if(game_dir in example_projects or game_dir in builtin_games or game_dir in COMMANDS_LIST):
            print("invalid name!")
            exit()

    if len(params)<3:
        project_type = "helloworld"
    else:
        if params[2]=="game" or params[2]=="arcade":
            project_type = "arcade_game"
        elif params[2]=="text":
            project_type = "text_game"
        else: 
            if params[2] in ["apis","show_apis","example","show"]:
                project_type = "demo"
            else:
                project_type = "helloworld"

    parent_dir = "projects" 

    print("New project name: " + game_dir)
    print("Project type: " + project_type)

    parent_and_game_dir = parent_dir + "/" + game_dir

    if not os.path.exists(parent_and_game_dir):
        print("Creating project dir...")
        os.makedirs(parent_and_game_dir)

    source_path = "./template_projects/"+project_type+"_code.template"
    print("source_path: " + source_path)
    dest_path = parent_and_game_dir
    print("dest_path: " + dest_path)

    if not os.path.exists(dest_path+"/tiles"):
        print("Copying tiles...")
        shutil.copytree(source_path+"/tiles", dest_path+"/tiles")

    if not os.path.exists(dest_path+"/generated_assets"):
        print("Create empty generated_assets directory...")
        os.makedirs(dest_path+"/generated_assets")

    file_names = ["main.c"]


    for file_name in file_names:
        print("Copying file_name: " + file_name)
        shutil.copy(source_path+"/"+file_name, dest_path)

    # Replace _GAME_NAME_CAPITAL with the capitalized game name without special characters
    fin = open("./"+dest_path+"/main.c", "rt")
    data = fin.read()
    data = data.replace('_GAME_NAME_CAPITAL',game_dir_capital_without_special_chars)
    fin.close()
    fin = open("./"+dest_path+"/main.c", "wt")
    #overrite the input file with the resulting data
    fin.write(data)
    
    templated_makefile_path = "./template_projects"

    shutil.copy(templated_makefile_path+"/"+"Makefile_game.template", "./"+dest_path+"/Makefile."+game_dir)

    #read input file
    fin = open("./"+dest_path+"/Makefile."+game_dir, "rt")
    #read file contents to string
    data = fin.read()
    #replace all occurrences of the required string
    data = data.replace('_GAME_NAME_CAPITAL',game_dir_capital)
    data = data.replace('_GAME_NAME_', game_dir)
    data = data.replace('_PARENT_DIR_', parent_dir)
    #close the input file
    fin.close()
    #open the file in write mode
    fin = open("./"+dest_path+"/Makefile."+game_dir, "wt")
    #overrite the input file with the resulting data
    fin.write(data)
    #close the file
    fin.close()


def reset(params):
    if len(params)<2:
        make_command = GNU_MAKE + " clean_generic_no_built_in -f makefiles.common/auxiliary/Makefile_common"

        print("Delete all non-project-specific temporary files")
        if(are_you_sure()=="y"):
            print("run command : " + make_command)
            print("")
            os.system(make_command)
            exit();
        else:
            exit();
    elif (len(params)==2) and (params[1]=='-y'):
        make_command = GNU_MAKE + " clean_generic_no_built_in -f makefiles.common/auxiliary/Makefile_common"

        print("Delete all non-project-specific temporary files")

        print("run command : " + make_command)
        print("")
        os.system(make_command)
        exit();
    else:
        game_dir = params[1]

    project_type = project_category(game_dir)

    parent_dir = project_type + "s"

    if (len(params)>2) and (params[2]=="-y"):
        interactive = False
    else:
        interactive = True

    print("Project name: " + game_dir)


    parent_and_game_dir = parent_dir + "/" + game_dir

    if not os.path.exists(parent_and_game_dir):
        print("Project not found!")
        exit();

    print("Delete all temporary files including generated assets for '"+game_dir+"'")

    if (not interactive) or (are_you_sure()=="y"):
        make_command = GNU_MAKE + " clean_no_built_in -f " + parent_dir+"/"+game_dir+"/Makefile."+game_dir;

        print("run command : " + make_command)
        print("\n")

        os.system(make_command)


def clean(params):
    if len(params)<2:
        make_command = GNU_MAKE + " clean_generic -f makefiles.common/auxiliary/Makefile_common"

        print("Delete all built binaries and non-project=specific temporary files")
        if(are_you_sure()=="y"):
            print("run command : " + make_command)
            print("")
            os.system(make_command)
            exit();
        else:
            exit();
    elif (len(params)==2) and (params[1]=='-y'):
        make_command = GNU_MAKE + " clean_generic -f makefiles.common/auxiliary/Makefile_common"

        print("Delete all built binaries and non-project-specific temporary files")

        print("run command : " + make_command)
        print("")
        os.system(make_command)
        exit();
    else:
        game_dir = params[1]

    project_type = project_category(game_dir)

    parent_dir = project_type + "s"

    if (len(params)>2) and (params[2]=="-y"):
        interactive = False
    else:
        interactive = True

    print("Project name: " + game_dir)

    parent_and_game_dir = parent_dir + "/" + game_dir

    if not os.path.exists(parent_and_game_dir):
        print("Project not found!")
        exit();

    print("Delete all built binaries and temporary files (also specific to '"+game_dir+"', e.g., generated assets)")

    if (not interactive) or (are_you_sure()=="y"):
        make_command = GNU_MAKE + " clean -f " + parent_dir+"/"+game_dir+"/Makefile."+game_dir;

        print("run command : " + make_command)
        print("\n")

        os.system(make_command)


def delete(params):
    if len(params)<2:
        game_dir="helloworld"
    else:
        candidate_name = params[1]
        if(candidate_name in example_projects or candidate_name in builtin_games or candidate_name in COMMANDS_LIST):
            print("invalid name!")
            exit()
        else:
            game_dir = candidate_name

    if (len(params)>2) and (params[2]=="-y"):
        interactive = False
    else:
        interactive = True

    print("Interactive: " + str(interactive))
    parent_dir = "projects"

    print("Project name: " + game_dir)

    parent_and_game_dir = parent_dir + "/" + game_dir
    print("Remove the project '"+game_dir+"' with all its files (source, graphics assets, makefile)")        
    if (not interactive) or (are_you_sure()=="y"):
        if os.path.exists(parent_and_game_dir):
            print("Deleting directory " + parent_and_game_dir)
            shutil.rmtree(parent_and_game_dir)

        makefile_name = "Makefile."+game_dir
        if os.path.exists(makefile_name):
            print("Deleting..." + makefile_name)
            os.remove(makefile_name)
        print("'" + game_dir + "' deleted")
    else:
        exit()


def test(params):
    if(len(params)<2) or params[1]=="self":
        original_projects = list(["list"])

        create(["create", "_test_project"])
        projects_after_create = list(["list"])
        if("_test_project" not in projects_after_create):
            print("\nERROR: project not created") 

        build(["build", "_test_project"])

        delete(["delete","_test_project","-y"])
        projects_after_delete = list(["list"])
        if("_test_project" in projects_after_delete):
            print("\nERROR: project not deleted")
    elif params[1]=="compile":
        make_command = GNU_MAKE + " test"
        os.system(make_command)        
    elif params[1]=="z88dk_quick":
        make_command = GNU_MAKE + " z88dk_quick_test"
        os.system(make_command)     

    
def list(params):

    if(len(params)<2):
        project_dirs = ["examples", "games", "projects"]
    elif(params[1]=="all"):
        project_dirs = ["examples", "games", "projects"]
    elif params[1] in ["games", "examples", "projects"]:
        project_dirs = [params[1]]
    elif params[1] in ["new"]:
        project_dirs = ["projects"]
    elif params[1] in ["built-in", "builtin"]:
        project_dirs = ["games", "examples"]
    else:
        exit()

    projects = []

    print("Searching folders")
    for mypath in project_dirs:
        print(mypath)

    print("")

    for mypath in project_dirs:
        for (dirpath, dirnames, filenames) in walk(mypath):
            projects.extend(dirnames)
            break
    
    print("Found: " + str(len(projects)))

    print("")

    for project in projects:
        print(project)

    return projects



# Which if any pattern is the line matching?
def line_pattern(line):
    for i in range(len(PATTERN_LIST)):
        if PATTERN_LIST[i] in line:
            return i
    
    return -1


# Detect Assembly extension
def has_extension(string, patterns):
    for i in range(len(patterns)):
        if string.endswith(patterns[i]) or string.endswith(patterns[i].upper()):
            return True
    return False


# BASIC if nothing is found between commas in BASIC than insert a "0" character
def fill_empty_slots_with_zero(data_list):
    new_list = []
    for i in range(len(data_list)):
        if data_list[i]=="":
            new_list.append("0")
        else:
            new_list.append(data_list[i])
    
    return new_list


# Try to detect hex data without hex prefixes
def has_headless_hex(trimmed_lines):
    if "$" not in str(trimmed_lines) and "&" not in str(trimmed_lines):
        for i in range(len(trimmed_lines)):
            data = trimmed_lines[i].split(",")
            for j in range(len(data)):
                if len(data[j])!=2:
                    return False
        return True
    else:
        return False


def has_nine_byte_lines(trimmed_lines):
    for i in range(len(trimmed_lines)):
        length = len(trimmed_lines[i].split(","))
        if length!=9:
            return False
    return True



def normalize_line(line):
    # Remove spaces and new lines
    line = line.replace(" ","").replace("\n","")

    # Convert hex notation to $
    line = line.replace(">","$").replace("&","$")

    # Convert bin notation to %
    line = line.replace("%","@").replace("0b","@")

    # Capture binary BIN UDG in Sinclair BASIC
    line = line.replace("BIN", "\nBIN@")

    if("symbolafter" in line):
        # line = line.replace("symbolafter","")
        # line = line+"symbol"
        line = ""
    if("SYMBOLAFTER" in line):
        # line = line.replace("SYMBOLAFTER","")
        # line = line+"SYMBOL"
        line = ""
    
    return line


def remove_basic_comments(line):
    line = line.split(":REM")[0]
    line = line.split(":rem")[0]
    line = line.split(": REM")[0]
    line = line.split(": rem")[0]
    line = line.split("'")[0]
    line = line.replace("{","").replace('}"',"").replace("}",",").replace('"',"")
    return line


def remove_assembly_comments(line):
    line = line.split(";")[0]
    return line


def display_data_type(word_data):
    if word_data:
        data_type = "16-bit"
    else:
        data_type = "8-bit"
    
    print("Data type detected   : " + data_type)


def display_code_type(basic_code):
    if basic_code:
        code_type = "BASIC"
    else:
        code_type = "Assembly"
        
    print("Code type            : " + code_type)


def display_extension_type(assembly_extension, basic_code):
    if assembly_extension:
        extension_type = "Assembly"
    elif basic_code:
        extension_type = "BASIC"
    else:
        extension_type = "Undefined"
    
    print("File extension type  : " + extension_type)


def is_basic_code(directive,assembly_extension):
    return (directive in BASIC_ONLY_PATTERN_LIST) or ((directive=="data" or directive=="DATA") and not assembly_extension)


# It should be able to import from 
# - Assembly files that use byte directives with either decimal and hex notation
# - Assembly files that use word directives with ONLY hex notation
# - BASIC files that use decimal, hex notation or "headless" hex notation (by guessing)
def import_from_source(params):
    filename = params[1]

    skip_option = params[len(params)-1]=="-skip"
       
    try:
        fin = open(filename, "rt")
        
        assembly_extension = has_extension(filename,ASSEMBLY_EXTENSIONS)
        basic_extension = has_extension(filename,BASIC_EXTENSIONS)
        
        xsize = 8
        ysize = 8
        

        lines = fin.readlines()
            
        trimmed_lines = []
        filtered_lines = []

        pattern_count = [0] * len(PATTERN_LIST)
              
        # Do some filtering and count most common candidate directive
        for line in lines:
            line = normalize_line(line)
            
            trimmed_lines.append(line)
            pattern_index = line_pattern(line)
            if pattern_index>=0:
                pattern_count[pattern_index]+=1
                
        max_directive_count = max(pattern_count)
        
        if max_directive_count==0:
            raise ValueError("No pattern found")
        
        display_extension_type(assembly_extension,basic_extension)
        
        max_index = pattern_count.index(max_directive_count)      
        directive = PATTERN_LIST[max_index]
            
        # Guess if file is BASIC and if data are 8-bit or 16-bit values
        # Remark: DATA can be both an Assembly (TMS9900) directive or a BASIC command
        basic_code = is_basic_code(directive, assembly_extension)
            
        word_data =  directive in WORD_PATTERN_LIST and not basic_code
     
        # print("Pattern count: " + str(pattern_count))
        print("Detected pattern     : " + directive)
        
        display_data_type(word_data)
        display_code_type(basic_code)
      
        for line in trimmed_lines:
            if (directive in line or directive.upper() in line):
                if basic_code:
                    line = remove_basic_comments(line)
                else:
                    # Remove comments 
                    line = remove_assembly_comments(line)
                filtered_lines.append(line)
     
        res = ""
        tiles = []
        tile_count = 0
        line_index = 0
        new_tile=""
        single_byte_count = 0

        trimmed_lines = []
            
        while line_index<len(filtered_lines):
            trimmed_lines.append(filtered_lines[line_index].split(directive)[1])
            line_index+=1
        
        # Heuristic to guess BASIC code with hex data without a hex prefix
        headless_hex = has_headless_hex(trimmed_lines)
        
        # Heuristic to guess the presence of an initial header byte (to be skipped)
        header_byte = has_nine_byte_lines(trimmed_lines)


        skip_first = skip_option or header_byte or (directive in SKIP_PATTERN_LIST)

        print("Skip first item      : " + str(skip_first))

        line_index = 0
        
        print("Headless hex data    : " + str(headless_hex))
        print("")
        
        while tile_count<NUMBER_OF_TILES and line_index<len(filtered_lines):
            trimmed_line = trimmed_lines[line_index]

            line_index+=1
            data_list = trimmed_line.split(",")
                            
            if skip_first:
                data_list = data_list[1:]
                
            if basic_code:
                data_list = fill_empty_slots_with_zero(data_list)
        
            # Remark: It only works for hex notation: Split word into two bytes 
            if word_data:
                new_data_list = []
                for i in range(len(data_list)):
                    new_data_list += [data_list[i][0:3],"$"+data_list[i][3:5]]
                data_list = new_data_list
            
            for data in data_list:
                # TODO: This should be done at the beginning: Interpret as hex 
                if headless_hex and data[0]!= "$":
                    data = "$" + data
                if data.startswith("@"):
                    data = str(int(data[1:],2))
                new_tile+=data
                single_byte_count+=1
                if single_byte_count==ysize:
                    single_byte_count=0
                    tiles.append(new_tile)
                    print(new_tile)
                    print_shape(new_tile,xsize)
                    tile_count+=1
                    new_tile=""
                else:
                    new_tile+=","

        if(len(params)>=3) and "-" not in params[2]:
            print("project    : " + params[2])

            main_path = "./projects/" + params[2] + "/tiles/"+str(xsixe)+"x"+str(ysize)+"/tile"
            print("main_path: " + main_path)
            for index in range(len(tiles)):
                dest = main_path + str(index) + ".txt"
                print("Copy/Overwrite : " + dest)
                fin = open(dest, "wt")
                fin.write(tiles[index])
                fin.close()
    except ValueError as valueError:
        print(str(valueError.args[0]))
    except Exception as exception:
        print("Sorry! Failed to extract tile data from file")

# Import a single tile from a text file that describes its shape with characters
def tile(params):
    fin = open(params[1], "rt")
    lines = fin.readlines()
    res = ""
    xsize = len(lines[0])-1
    ysize = len(lines)
    dir = str(xsize)+"X"+str(ysize)
    print("Tile shape: " + dir)
    for line_index in range(ysize):
        number_of_bits = len(lines[line_index])-1
        value = 0
        for i in range(number_of_bits):
            if lines[line_index][i] in ONE_REPPRESENTATIONS:
                value+=2**(number_of_bits-1-i)
        res += str(value)
        if line_index!=ysize-1:
            res += ","
    fin.close()
    
    print(res)
    if(len(params)>=3):
        print("project    : " + params[2])
        print("tile index : " + params[3])
        dest = "./projects/" + params[2] + "/tiles/" + dir + "/tile" + params[3] + ".txt"
        print("Copy/Overwrite : " + dest)

        fin = open(dest, "wt")
        fin.write(res)
        fin.close()


def print_shape(string, xsize):
    string_items = string.split(",");
    items = []
    for string_item in string_items:
        no_dollar_item = string_item.replace("$","0x")
        if no_dollar_item.startswith("0x"):
            base = 16
        elif no_dollar_item.startswith("@"):
            no_dollar_item = no_dollar_item[1:]
            base = 2
        else:
            base = 10
        bin_string=bin(int(no_dollar_item,base))[2:]
        missing_zeros = int(xsize) - len(bin_string)
        padded_bin_string = ""
        for i in range(missing_zeros):
            padded_bin_string += "0"
        padded_bin_string+=bin_string

        padded_bin_string = padded_bin_string.replace("0",".").replace("1","#")
        
        items.append(padded_bin_string)

    for item in items:
        print(item)
    print("")
    print("")


def print_shape_from_file(parent_dir, project_name, xsize, ysize, index):
    dir = xsize+"x"+ysize
    dest = "./" + parent_dir + "/" + project_name + "/tiles/" + dir + "/tile" + str(index) + ".txt"
    print("Decoding file tile: " + dest)
    print("")
    fin = open(dest, "rt")
    tile_data = fin.read()
    fin.close()
    print_shape(tile_data,xsize)


def show(params):
    parent_dir = project_category(params[1])+"s"
    
    if len(params)<4:
        xsize = "8"
        ysize = "8"
    else:
        xsize = params[2]
        ysize = params[3]

    if len(params)>=5:
        index = params[4]
    else:
        index = "";
    
    if index!="":
        print_shape_from_file(parent_dir, params[1], xsize, ysize, index)
    
    else:
        for i in range(NUMBER_OF_TILES):
            print_shape_from_file(parent_dir, params[1], xsize, ysize, i)
    

def help_help():
    print("Possible values for <command>:")
    print(' '.join(str(cmd) for cmd in COMMANDS_LIST))
    print("")
    print("Use xl help <command> for <command>-specific help")
    print("\nExample:")
    print("\nxl help create              \n  It displays the help page for the 'create' command")


def run_native(params):
    command_prefix = "../build/X" + params[1] + "_ncurses"

    if len(params)>=4:
        xsize = params[2]
        ysize = params[3]
        command_string = command_prefix + "_" + xsize + "X" + ysize + "." + NATIVE_EXTENSION
    else:
        command_string = command_prefix + "." + NATIVE_EXTENSION
    print("Going to run: " + command_string)
    os.system(command_string)

def run(params):
    
    if len(params)==2:
        run_native(params)
    
    if len(params)>=3:
        target = params[2]
        if target=="vic20":
            target = "vic20_exp_8k"
        if target=="ncurses":
            run_native(params[0:2]+params[3:])

        elif target in ["c64","vic20_exp_8k","vic20_exp_16k","plus4","c128","xpet","cbm-ii"]:
            extension = "prg"
            if target=="c64":
                emulator = "x64"
            elif target.startswith("vic20"):
                emulator = "xvic -memory 24k"
            elif target=="plus4":
                emulator = "xplus4"
            elif target=="c128":
                emulator = "x128"
            elif target=="pet":
                emulator = "xpet"
            elif target=="cbm-ii":
                emulator = "xcbm2"
                        
            command_string = emulator + " -autostartprgmode 1  ../build/X" + params[1] + "_" + target + "." + extension
            print("Going to run: " + command_string)
            os.system(command_string)

        else:
            run_native(params)


def help(params):
    if len(params)<2:
        print("\nxl <command> <[optional] parameters>")   
        print("\n(or xl <project> <[optional] parameters> as a shorthand for \n xl build <project> <[optional] parameters>)")
        print("\n<parameters>")
        help_help()
    elif params[1]=="show":
        print("xl show <project> <[optional] XTileSize> <[optional] YTileSize> <[optional] TileIndex> ")
        print("It displays the shape of graphics tiles of a given project")
        print("")
        print("<project>")
        print("Use this mandatory parameter to specify the project whose tiles you want to display")
        print("")
        print("<XTileSize> <YTileSize>")
        print("These optional parameters specify the size of the tiles we want to see")
        print("")
        print("<TileIndex>")
        print("This optional parameter specifies which tile we want to display.")
        print("When no index is specified, then all tiles of the given shape are displayed.")
        print("")
        print("Example:")
        print("xl show chase 8 8 5")
        print("Decoding file tile: ./games/chase/tiles/8x8/tile5.txt")
        print("")
        print("..####..")
        print(".#....#.")
        print("#.#..#.#")
        print("#..##..#")
        print("#..##..#")
        print("#.#..#.#")
        print(".#....#.")
        print("..####..")
        
    elif params[1]=="resize":
        print("xl resize <project> <XSize> <YSize>")
        print("It builds <project> for the native host with screen size provided by <XSize> and <YSize>.")
        print("The built binaries will be in the 'build' directory.")

        print("\n<project>")
        print("<project> can also be 'games'/'examples'/'projects'/'all' to build multiple projects.")   
        
        print("\nxl resize bomber 20 20       \n  It builds Cross Bomber for the native host with screen size 20x20.")
        print("\nxl reize examples 16 12     \n  It builds all examples for the native host with screen size 16x12.")

    elif params[1]=="run" or params[1]=="r":
        print("xl run <project> <xsize> <ysize>")
        print("It runs the previously compiled native version of <project> with size <xsize> X <ysize>.")
        print("")
        print("<project>")
        print("This parameter is the name of the project that we want to run.")
        print("")
        print("Examples:")
        print("xl run snake")
        print("It runs the previously built (e.g., with 'xl build snake') native version of Cross Snake.")
        print("")  
        print("xl run snake 16 16")
        print("It runs the previously built with size 16X16 (with 'xl resize snake 16 16') native version of Cross Snake.")

    elif params[1]=="string":
        print("xl string <string>")
        print("It converts a string litteral into a concatenation of")
        print('_XL_A,..., _XL_Z, _XL_a, ..., _XL_z, _XL_SPACE, "0", ..., "9"')
        print("<string>")
        print("This parameter is the string to convert. It has to match the regular expression '[A-Za-z0-9 ]*'.")
        print("")
        print("Example:")
        print('xl string "1 Hello World 2"')
        print('"1" _XL_SPACE _XL_H _XL_e _XL_l _XL_l _XL_o _XL_SPACE _XL_W _XL_o _XL_r _XL_l _XL_d _XL_SPACE "2"')
    elif params[1]=="rebuild":
        print("xl rebuild <project> <[optional] target>")
        print("It rebuilds <project>.")
        print("It is equivalent to 'xl reset' followed by 'xl build <project> <target>'")
        print("Use 'xl help reset' and 'xl help build' for more information")
    elif params[1]=="import":
        print("xl import <source_file> <[optional] project>")
        print("")
        print("<source_file>")
        print("It is an Assembly or BASIC file (e.g., an Assembly file exported from CharPad or VChar64).")
        print("For example in CharPad you can export the tile data with:")
        print("File->Import/Export->Text/Asm->Export All or File->Import/Export->Text/Asm->Export All")
        print("")
        print("<project>")
        print("If a project name is passed then the tiles are imported into <project>")
        print("")
        print("Example:")
        print("If you create a new project 'myname' with")
        print("xl create myname")
        print("You can import from an Assembly file with something like:")
        print("xl import ./examples/tiles/tiles_all.asm")
    elif params[1]=="tile":
        print("xl tile <shape_file> <[optional] project> <[optional] tile_index>")
        print("It converts the file <shape_file> into a line that can be used as an asset file.")
        print("")  
        print("<shape_file>")
        print("The file <shape_file> describes with '#' and '.' the shape of a tile.")
        print("")
        print("<project>")
        print("This optional parameter specifies the project whose tile we want to modify")
        print("")
        print("<tile_index>")
        print("This parameter is the index of the tile we want to modify")
        
        print("\nPress ENTER to continue...")
        time.sleep(1)

        if sys.version_info[0] < 3:
            raw_input()
        else:
            input()
            
        print("\nExample in 'src/examples/tiles/tile_shape0.txt':")
        print("...##...")
        print("..#..#..")
        print("...##...")
        print(".##..##.")
        print("#.####.#")
        print("# ####.#")
        print("..#..#..")
        print("..#..#..")
        print("")
        print("xl tile ./examples/tiles/tile_shape0.txt")
        print("produces: ")
        print("24,36,24,102,189,189,36,36")
        print("")
        print("To be copied in 'tile_<index>.txt' in '<project>/tiles/8x8' to modify the shape.")
        print("Remark: run 'xl reset <project>' before rebuilding <project> with modified tiles.")
        
    elif params[1]=="test":
        print("xl test <[optional] params>")
        print("It runs some operations to test 'xl'.")
        print("")
        print("<params>")
        print("If 'self' or nothing is passed to <params>, then it self-tests by performing a sequence of 'xl' commands.")
        print("If 'compile' is passed to <params>, then it compiles a test program for some targets with different compilers.")
        print("If 'z88dk_quick' is passed to <params>, then it compiles a test program using both Z88DK compilers.")
    elif params[1]=="debug" or params[1]=="d":
        print("xl debug <project> <XSize> <YSize>")
        print("It builds <project> for the native host in debug mode with screen size provided by <XSize> and <YSize>.")
        print("The built binaries will be in the 'build' directory.")

        print("\n<project>")
        print("<project> can also be 'games'/'examples'/'projects'/'all' to build multiple projects.")   
        
        print("\nxl debug bomber 20 20       \n  It builds Cross Bomber for the native host in debug mode with screen size 20x20.")
        print("\nxl debug examples 16 12     \n  It builds all examples for the native host in debug mode with screen size 16x12.")
        
    elif params[1]=="build":
        print("xl build <project> <[optional] target>")
        print("It builds <project> for <target>.")
        print("Remark: The 'build' command can be omitted.")
        print("The built binaries will be in the 'build' directory.")

        print("\n<project>")
        print("<project> can also be 'games'/'examples'/'projects'/'all' to build multiple projects")   
        
        print("\n<target>")
        print("If no <target> is passed, then the native target (terminal console) is considered.")
        print("\nIf '<dev-kit>_targets' is passed as <target> (e.g., 'cc65_targets'), \nthen the given project/s is/are built for all targets that use <dev-kit> to be compiled.")
        print("Possible dev-kits are: 'cc65', 'z88dk', 'cmoc', 'lcc1802'.") 
        print("\n[NOT recommended] If 'all' is passed as <target>, then the given project/s is/are built for all targets (it may take very long and it requires all supported compilers.") 
        
        print("\nPress ENTER to continue...")
        time.sleep(1)

        if sys.version_info[0] < 3:
            raw_input()
        else:
            input()
        
        print("\nExamples:")
        print("\nxl build bomber vic20       \n  It builds Cross Bomber for the Commodore Vic 20 using CC65.")
        print("\nxl snake                    \n  It builds Cross Snake for the native target (terminal console).")
        print("\nxl chase cc65_targets       \n  It builds Cross Chase for all targets that use CC65 to be built.")
        print("\nxl games cpc                \n  It builds all games for the Amstrad CPC using Z88DK.")
        print("\nxl examples c64             \n  It builds all examples for the Commodore 64 using CC65.")
        print("\nxl horde all                \n  It builds Cross Horde for all its supported targets using all supported necessary compilers.")
        print("\nxl projects all             \n  It builds all built-in projects for all supported targets using all supported necessary compilers.")
        print("\nxl all c16                  \n  It builds all projects (games and examples and user-defined projects) for the Commodore 264 series using CC65.")
    elif params[1]=="create" or params[1]=="c":
        print("xl create <project> <[optional] type>")
        print("It creates <project>.")
        
        print("\n<type>")
        print("If no <type> is passed, then the initial code will just display 'hello world'")
        print("If 'game' is passed as <type>, then the project is build with some initial template game code.")
        print("If 'apis' is passed as <type>, then the project is build with some code that shows how to use all APIs.")
        
        print("\nExamples:");
        print("\nxl create foo               \n  It builds a new project 'foo' with some initial code that display 'hello world' on the screen.")
        print("\nxl create bar game          \n  It builds a new project 'bar' with some initial game code (main loop, level loop, etc.).")
    elif params[1]=="delete":
        print("xl delete <project> <[optiona] interactive>")
        print("It removes <project>, i.e., it deletes its folder with its content (source code, graphics assets, makefile).")
        
        print("\n<project>")
        print("<project> cannot be a built-in project.")

        print("\n<interactive>")
        print("If '-y' is passed as <interactive>, then the command won't ask for confirmation.")

        print("\nExample:")
        print("\nxl delete foo               \n  It deletes the project 'foo'.")
        print("\nxl delete foo -y            \n  Same as above but no confirmation is asked.")   
    elif params[1]=="reset":
        print("xl reset <[optional] project> <[optiona] interactive>")
        print("It deletes temporary files created during the build process.")
        print("\n<project>")
        print("If no <project> is passed, only non-project specific temporary files are deleted.") 
        print("If the <project> parameter is used, then also project-specific temporary files are deleted (and in particular generated graphics assets).")
        
        print("\n<interactive>")
        print("If '-y' is passed as <interactive>, then the command won't ask for confirmation.")
        
        print("\nExamples:")
        print("\nxl reset                    \n  It deletes non-project specific temporary files.")
        print("\nxl reset foo                \n  It deletes all temporary files (both generic and project-specific).")
        print("\nxl reset foo -y             \n  Same as above but no confirmation is asked.")
    elif params[1]=="clean": 
        print("xl clean <[optional] project> <[optiona] interactive>")
        print("It deletes both built binaries and temporary files created during the build process.")
        print("\n<project>")
        print("If no <project> is passed, only built binaries and non-project specific temporary files are deleted.") 
        print("If the <project> parameter is used, then also project-specific temporary files are deleted (e.g., generated graphics assets).")
        
        print("\n<interactive>")
        print("If '-y' is passed as <interactive>, then the command won't ask for confirmation.")
        
        print("\nExamples:")
        print("\nxl clean                    \n  It deletes all built binaries and non-project specific temporary files.")
        print("\nxl clean foo                \n  It deletes all built-in binaries and all temporary files (both generic and project-specific).")
        print("\nxl clean foo -y             \n  Same as above but no confirmation is asked.")

    elif params[1]=="list" or params[1]=="l":  
        print("xl list <[optional] params>")
        print("It lists current projects in a given category or all projects.")
        print("")
        print("<params>")
        print("If nothing is passed as <params> then all projects are built")
        print("If 'games','examples' or 'projects' is passed as <params> then only projects in the respective directory are listed")
        print("\nExamples:")
        print("xl list                       \n  It lists all projects (games, examples and new projects)")
        print("xl list projects              \n  It lists all user-defined projects") 
    elif params[1]=="help" or params[1]=="h":
        print("xl help <[optional] command>")
        print("It displays help instructions.")
        
        
        print("\n<command>")
        help_help()
    else:
        print("Command not recognized")
        exit()

# ---------------------------------------------


# ---------------------------------------------
#  System               Value               
# ---------------------------------------------
#  Linux                linux or linux2 (*) 
#  Windows              win32               
#  Windows/Cygwin       cygwin              
#  Windows/MSYS2        msys                
#  Mac OS X             darwin              
#  OS/2                 os2                 
#  OS/2 EMX             os2emx              
#  RiscOS               riscos              
#  AtheOS               atheos              
#  FreeBSD 7            freebsd7            
#  FreeBSD 8            freebsd8            
#  FreeBSD N            freebsdN            
#  OpenBSD 6            openbsd6            
# ---------------------------------------------


# ---------------------------------------------
if __name__ == "__main__":
    platform = sys.platform
    
    print("----------------------------")
    print("Cross-Lib `xl` helper script")
    print("----------------------------")
    print("Platform: " + platform)
    if(platform in ["cygwin", "linux", "linux2", "darwin", "msys", "win32"]):
        GNU_MAKE="make"
    else:
        GNU_MAKE="gmake"

    if(platform in ["cygwin", "msys"]):
        NATIVE_EXTENSION="exe"
    else:
        NATIVE_EXTENSION="out"
        
    print("GNU MAKE command: " + GNU_MAKE)
    print("----------------------------")
    print("")
    builtin_games = ["chase","shoot","bomber","snake","horde"]
    game_projects = dirs_in_path("./games")
    example_projects = dirs_in_path("./examples")
    
    if len(sys.argv)<2:
        print("You need to provide a command or a project name")
        help(sys.argv[1:])
    elif sys.argv[1]=="run" or sys.argv[1]=="r":
        run(sys.argv[1:])
    elif sys.argv[1]=="string":
        string(sys.argv[1:])
    elif sys.argv[1]=="import":
        import_from_source(sys.argv[1:])
    elif sys.argv[1]=="rebuild":
        rebuild(sys.argv[1:])
    elif sys.argv[1]=="show":
        show(sys.argv[1:])
    elif sys.argv[1]=="test":
        test(sys.argv[1:])
    elif sys.argv[1]=="tile":
        tile(sys.argv[1:])
    elif sys.argv[1]=="build":
        build(sys.argv[1:])
    elif sys.argv[1]=="resize":
        resize(sys.argv[1:],0)
    elif sys.argv[1]=="debug" or sys.argv[1]=="d":
        resize(sys.argv[1:],1)
    elif sys.argv[1]=="create" or sys.argv[1]=="c":
        create(sys.argv[1:])
    elif sys.argv[1]=="clean":
        clean(sys.argv[1:])
    elif sys.argv[1]=="reset":
        reset(sys.argv[1:])
    elif sys.argv[1]=="delete":
        delete(sys.argv[1:])
    elif sys.argv[1]=="list" or sys.argv[1]=="l":
        list(sys.argv[1:])
    elif sys.argv[1]=="help" or sys.argv[1]=="h":
        help(sys.argv[1:])
    else:
        print(sys.argv)
        build(sys.argv)
